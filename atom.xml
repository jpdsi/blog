<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Japan Developer Support Internet Team Blog</title>
  
  <subtitle>日本マイクロソフトの Azure Bot Service / Internet Information Services (IIS) / Internet Explorer / Microsoft Edge に関するサポート情報のブログです。</subtitle>
  <link href="https://jpdsi.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://jpdsi.github.io/blog/"/>
  <updated>2021-05-21T07:37:51.021Z</updated>
  <id>https://jpdsi.github.io/blog/</id>
  
  <author>
    <name>Developer Support Internet Japan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>net-export の使い方</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/how-to-use-net-export/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/how-to-use-net-export/</id>
    <published>2021-05-20T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.021Z</updated>
    
    <content type="html"><![CDATA[<p>みなさんこんにちは。日本マイクロソフトの IE/Edge サポートチームです。</p><p>今回は Chromium の機能である net-export を使用して、Chromium Edge のネットワーク レベルのイベントや状態に関する詳細情報を確認する方法を紹介します。<br>サポートにお問い合せいただいたときにも、今回の手順でログを取得いただくこともありますので、以下を参考にしていただければと思います。</p><hr><h2 id="ログの取得方法"><a href="#ログの取得方法" class="headerlink" title="ログの取得方法"></a>ログの取得方法</h2><ol><li><p>Microsoft Edge を起動し、アドレス バーに edge://net-export/ を入力してページを開きます。</p></li><li><p>OPTIONS で、[Include raw bytes (will include cookies and credentials)] をオンにします。<br><img src="/blog/internet-explorer-microsoft-edge/how-to-use-net-export/net-export1.png" alt="ログ取得の設定"></p></li><li><p>[Start Logging to Disk] をクリックします。<br><img src="/blog/internet-explorer-microsoft-edge/how-to-use-net-export/net-export2.png" alt="ログ取得の開始"></p></li><li><p>ファイル名を入力し、保存場所を選択します。</p></li><li><p>[保存] をクリックします。<br><img src="/blog/internet-explorer-microsoft-edge/how-to-use-net-export/net-export3.png" alt="保存するファイル名を指定"></p></li><li><p>新しいタブを開き、問題を再現させます。<br><img src="/blog/internet-explorer-microsoft-edge/how-to-use-net-export/net-export4.png" alt="現象の再現"></p></li><li><p>現象再現後に net-export のタブに戻り、[Stop logging] をクリックします。</p></li><li><p>停止すると以下の画面になります。<br><img src="/blog/internet-explorer-microsoft-edge/how-to-use-net-export/net-export5.png" alt="ログ取得の終了"></p></li></ol><hr><h2 id="保存したログの確認方法"><a href="#保存したログの確認方法" class="headerlink" title="保存したログの確認方法"></a>保存したログの確認方法</h2><p>上記の手順で取得した json ファイルは、以下のようにして任意の PC で表示できます。</p><ol><li><p>Microsoft Edge を起動し、<a href="https://netlog-viewer.appspot.com/">https://netlog-viewer.appspot.com/</a> を開きます。<br>※ <a href="https://chromium.googlesource.com/catapult/+/refs/heads/main/netlog_viewer">netlog-viewer</a> は、クライアント (ブラウザー) 上だけで json ファイルを解析して視覚化します。外部へデータを送信することはありません。</p></li><li><p>[ファイルの選択] をクリックして json ファイルのパスを指定します。<br><img src="/blog/internet-explorer-microsoft-edge/how-to-use-net-export/net-export-view1.png" alt="表示するログ ファイルの選択"></p></li><li><p>ファイルが読み込まれると以下の画面になります。<br><img src="/blog/internet-explorer-microsoft-edge/how-to-use-net-export/net-export-view2.png" alt="ログの表示画面"></p></li></ol><p>左側のメニューから各種情報を確認できます。</p><ul><li><p>Import<br>net-export で取得した json ファイルを読み込みます。</p></li><li><p>Proxy<br>ブラウザで使用しているプロキシ設定に関する情報を表示します。プロキシを使用していない場合は、”Use DIRECT connections” と表示されます。</p></li><li><p>Events<br>発生したイベントのリストを表示します。イベントには、ソケット接続、SPDY セッション、HTTP-TCP 接続、URL 要求などがあります。エラーは赤い文字で表示されます。</p></li><li><p>Timeline<br>開いているソケット数、使用中のソケット数、URL 要求、DNS 要求、送受信したデータ量などの情報をグラフに表示します。</p></li><li><p>DNS<br>端末の DNS ルックアップのログを表示します。ウェブページを読み込めない場合の問題のトラブルシューティングに役立ちます。ログには、URL とそれに対応する IP だけでなく、DNS 要求の時間も示されます。</p></li><li><p>Sockets<br>開いているソケットと使用されているソケットのログを表示します。このログはネットワークの高度なトラブルシューティングに使用します。</p></li><li><p>Alt-Svc<br>代替サービス マッピングに関する情報を表示します。</p></li><li><p>HTTP/2<br>HTTP/2 セッションと代替サービス マッピングのログを表示します。</p></li><li><p>QUIC<br>Quick UDP Internet Connections（QUIC）に関する情報を表示します。これは、TCP を使用する接続指向のウェブアプリを最適化するネットワーク プロトコル（試験運用中）です。</p></li><li><p>Reporting<br>送信元の設定、ネットワーク エラーのログ記録に関するポリシー、キューに登録されたレポートを表示します。</p></li><li><p>Cache<br>キャッシュされたエントリと統計情報のリストを表示します。</p></li><li><p>Modules<br>アクティブな Edge / Chrome 拡張機能とアプリのリストを表示します。</p></li><li><p>Prerender<br>アクティブな事前レンダリング ウェブサイトとその履歴を表示します。</p></li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;みなさんこんにちは。日本マイクロソフトの IE/Edge サポートチームです。&lt;/p&gt;
&lt;p&gt;今回は Chromium の機能である net-export を使用して、Chromium Edge のネットワーク レベルのイベントや状態に関する詳細情報を確認する方法を紹介しま</summary>
      
    
    
    
    
    <category term="Microsoft Edge" scheme="https://jpdsi.github.io/blog/tags/Microsoft-Edge/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Edge 組み込みのサイト リスト マネージャーについて</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/</id>
    <published>2021-05-19T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.017Z</updated>
    
    <content type="html"><![CDATA[<p>みなさんこんにちは！</p><p>Microsoft Edge に組み込まれた サイト リスト マネージャー をご紹介します。</p><p>モダンなブラウザーにまだ対応できていないサイトを IE モードで表示させたい場合や、逆にモダンなサイトを IE で開こうとした場合に Edge に転送したい場合などにサイト リスト (.xml) をご利用いただいているかと思います。</p><p>実はサイト リストは <a href="https://docs.microsoft.com/ja-jp/internet-explorer/ie11-deploy-guide/use-the-enterprise-mode-site-list-manager">スタンドアロンの Enterprise Mode Site List Manager というツール</a> だけではなく、Microsoft Edge の組み込みの機能で作成することもできます。</p><p>この機能は <a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-site-list-manager">Microsoft Edge の Enterprise Site List Manager</a> でもご紹介していますが、今回は画面ショットを交えてご説明していきます。</p><hr><ol><li>Microsoft Edge を起動してアドレスバーに edge://compat/sitelistmanager と入力し開きます。</li></ol><p>※ 以下ポリシーを設定することで、「Microsoft Edge の互換性」の画面 (edge://compat/) に「エンタープライズ サイト リスト マネージャー」へのメニューを追加することもできます。</p><pre><code>  [コンピューターの構成]or[ユーザーの構成]   ＋[管理用テンプレート]    ＋[Microsoft Edge]  「Enterprise Mode Site List Manager」有効</code></pre><p><img src="/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/1.png" alt="エンタープライズ サイト リスト マネージャー"></p><ol start="2"><li><p>「サイトの追加」をクリックします。<br><img src="/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/2.png" alt="サイトの追加"></p></li><li><p>Web サイトの URL を指定します。この時 https:// や http:// などのプロトコルの指定を含めてはいけません。<br><img src="/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/3.png" alt="URL の指定"></p></li><li><p>Web サイトを開くブラウザーを選択します。<br>IE モードについては <a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/ie-mode-faq/">こちらのブログ記事</a> をご参考ください。<br><img src="/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/4.png" alt="ブラウザーの選択"></p></li><li><p>Web サイトに合わせて互換モードを選択します。<br><img src="/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/5.png" alt="IE モードで開く場合のドキュメント モードの指定"></p></li><li><p>必要に応じてコメントを記載します。そして「追加」をクリックして Web サイトをエンタープライズ サイト リストに追加します。<br><img src="/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/6.png" alt="コメントの入力"></p></li><li><p>必要に応じて「XML プレビュー」を使用してエクスポート時に作成される XML の内容を事前に確認します。<br><img src="/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/7.png" alt="サイト リスト (XML 形式) のプレビュー"></p></li></ol><p><img src="/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/8.png" alt="サイト リスト (XML 形式) の内容"></p><p>また、フィルターを利用してどの URL を追加したか確認できますのでこちらもご活用ください。<br><img src="/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/9.png" alt="検索方法"></p><ol start="8"><li><p>Web サイトの追加や確認が完了したら、XML ファイルに書き出すため「XML にエクスポート」をクリックします。<br><img src="/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/10.png" alt="エクスポート"></p></li><li><p>バージョン番号とファイル名を指定し、XML ファイルに「エクスポート」します。<br>XML ファイルはダウンロード フォルダーに保存されます。<br><img src="/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/11.png" alt="エクスポート"></p></li></ol><p>以上の方法でサイト リストを作成することができます。<br>会社に管理された環境で新たなソフトウェアをインストールできない場合でもこの方法ならサイト リストを作成できますね。</p><hr><p>&lt;参考情報&gt;</p><p><a href="https://docs.microsoft.com/ja-jp/internet-explorer/ie11-deploy-guide/what-is-enterprise-mode">エンタープライズ モードとエンタープライズ モード サイト一覧</a></p><p><a href="https://docs.microsoft.com/ja-jp/internet-explorer/ie11-deploy-guide/enterprise-mode-schema-version-2-guidance">エンタープライズ モード スキーマ v.2 ガイダンス</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;みなさんこんにちは！&lt;/p&gt;
&lt;p&gt;Microsoft Edge に組み込まれた サイト リスト マネージャー をご紹介します。&lt;/p&gt;
&lt;p&gt;モダンなブラウザーにまだ対応できていないサイトを IE モードで表示させたい場合や、逆にモダンなサイトを IE で開こうとした場合</summary>
      
    
    
    
    
    <category term="Microsoft Edge" scheme="https://jpdsi.github.io/blog/tags/Microsoft-Edge/"/>
    
    <category term="サイト リスト マネージャー" scheme="https://jpdsi.github.io/blog/tags/%E3%82%B5%E3%82%A4%E3%83%88-%E3%83%AA%E3%82%B9%E3%83%88-%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A3%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>Internet Explorer から Microsoft Edge への移行ガイドライン</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/guidelines-for-migrating-from-ie-to-microsoft-edge/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/guidelines-for-migrating-from-ie-to-microsoft-edge/</id>
    <published>2021-05-19T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.021Z</updated>
    
    <content type="html"><![CDATA[<p>みなさんこんにちは！</p><p>Microsoft は Internet Explorer (以降 IE) デスクトップ アプリのサポートを 2022 年 6 月 15 日に終了することをブログで公開しました。</p><p><a href="https://blogs.windows.com/japan/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/">Internet Explorer は Microsoft Edge へ – Windows 10 の Internet Explorer 11 デスクトップアプリは 2022 年 6 月 15 日にサポート終了</a></p><p><a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/internet-explorer-app-end-of-support/">Internet Explorer 11 デスクトップ アプリのサポート終了へ! IE モードへの移行を進めましょう!</a></p><p>これに伴い IE から Microsoft Edge (以降 Edge) やモダン ブラウザーへの移行を本格的に検討される方が多くなることを予想しています。<br>そんなことで今日は IE から Microsoft Edge へのステージ別移行ガイドライン的なブログを書きたいと思います。</p><p>2029 年をターゲットに 4 つのステージでやるべきことをご紹介します。<br>最終的にはステージ 4 の “IE が不要な状態” となることが望ましいので、本記事を参考に Edge への移行を進めてみてください。</p><hr><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li><a href="#%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B8-1-IE-%E3%82%92%E6%97%A2%E5%AE%9A%E3%81%AE%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%83%BC%E3%81%A8%E3%81%97%E3%81%A6%E9%81%8B%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B">ステージ 1. IE を既定のブラウザーとして運用している</a></li><li><a href="#%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B8-2-Edge-%E3%81%AB%E3%81%AF%E7%A7%BB%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8C%E3%80%81IE-%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A8-IE-%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97-%E3%82%A2%E3%83%97%E3%83%AA-%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%89%E3%82%A2%E3%83%AD%E3%83%B3%E3%81%AE-IE11-%E3%82%92%E4%BD%B5%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B">ステージ 2. Edge には移行しているが、IE モードと IEデスクトップ アプリ (スタンドアロンの IE11) を併用している</a></li><li><a href="#%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B8-3-IE-%E3%83%A2%E3%83%BC%E3%83%89%E3%82%92%E9%83%A8%E5%88%86%E7%9A%84%E3%81%AB%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8C-IE-%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AF%E3%82%82%E3%81%86%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84">ステージ 3. IE モードを部分的に利用しているが IE デスクトップ アプリはもう使っていない</a></li><li><a href="#%E3%82%B9%E3%83%86%E3%83%BC%E3%82%B8-4-Edge-%E3%81%AB%E5%AE%8C%E5%85%A8%E3%81%AB%E7%A7%BB%E8%A1%8C%E3%81%A7%E3%81%8D%E3%81%A6%E3%81%8A%E3%82%8A%E3%80%81IE-%E3%83%A2%E3%83%BC%E3%83%89%E5%90%AB%E3%82%81%E3%81%A6%E5%AE%8C%E5%85%A8%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%84">ステージ 4. Edge に完全に移行できており、IE モード含めて完全に必要ない</a></li></ul><hr><h2 id="ステージ-1-IE-を既定のブラウザーとして運用している"><a href="#ステージ-1-IE-を既定のブラウザーとして運用している" class="headerlink" title="ステージ 1. IE を既定のブラウザーとして運用している"></a>ステージ 1. IE を既定のブラウザーとして運用している</h2><h4 id="1-1-IE-に依存しているサイトの洗い出し"><a href="#1-1-IE-に依存しているサイトの洗い出し" class="headerlink" title="1-1. IE に依存しているサイトの洗い出し"></a>1-1. IE に依存しているサイトの洗い出し</h4><p>まずは IE に依存しているサイトがどれくらいあるのか、また、具体的にどのサイトが依存しているのか洗い出します。<br>1 ページずつ確認することが確実ですが、Enterprise Site Discoveryを使えば従来のドキュメント モードを使用しているサイトを機械的に検出することができます。</p><p><a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-site-discovery">Enterprise Site Discovery ステップ バイ ステップ ガイド</a></p><h4 id="1-2-IE-モードでの動作確認"><a href="#1-2-IE-モードでの動作確認" class="headerlink" title="1-2. IE モードでの動作確認"></a>1-2. IE モードでの動作確認</h4><p>洗い出したサイトが Edge の IE モードで動作するかテストを行い、動作しない場合は改修もしくは Microsoft のサポートに問い合わせてください。<br>なお、簡易的に IE モードでの動作を確認したい場合は IE モード テスト機能が便利です。<br>この機能は IE モードをタブ全体で有効にし、そのタブで開いたサイトはすべて IE モードになる機能です。<br>以下 2 つのポリシーを設定することで「…」-&gt;「その他のツール」-&gt;に「サイトを Internet Explorer モードで開く」のメニューが追加され使用できるようになります。</p><p>※ 参考 <a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/ie-mode-faq/#IE-%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E3%81%AE%E8%A1%A8%E7%A4%BA%E3%82%92%E3%83%86%E3%82%B9%E3%83%88%E3%81%97%E3%81%9F%E3%81%84">IE モードでの表示をテストしたい</a></p><pre><code>  [コンピューターの構成]or[ユーザーの構成]   ＋[管理用テンプレート]    ＋[Microsoft Edge]  「Internet Explorer 統合を構成する」有効にし IE モードを選択  「Internet Explorer モードのテストを許可」有効</code></pre><p><img src="/blog/internet-explorer-microsoft-edge/guidelines-for-migrating-from-ie-to-microsoft-edge/1.png" alt="ポリシーの設定"></p><p>なお <a href="https://youtu.be/XPFx4A32npk">こちら</a> で動画による解説もしていますのでぜひご覧ください。</p><h4 id="1-3-サイト一覧-xml-ファイルの作成とポリシーの設定"><a href="#1-3-サイト一覧-xml-ファイルの作成とポリシーの設定" class="headerlink" title="1-3. サイト一覧 (.xml) ファイルの作成とポリシーの設定"></a>1-3. サイト一覧 (.xml) ファイルの作成とポリシーの設定</h4><p>IE モードで問題なくサイトが動作することを確認したら、サイト一覧ファイルに IE モードで表示したいサイトを定義します。<br>サイト一覧の作り方については <a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/">こちらの記事</a> がありますので参考にしてみてください。<br>そして以下のポリシーを使って、作成したサイト一覧の取得先を設定します。</p><pre><code>  [コンピューターの構成]or[ユーザーの構成]   ＋[管理用テンプレート]    ＋[Microsoft Edge]   「エンタープライズ モード サイト一覧を構成する」有効にしサイト一覧の取得先を設定   (例 http://contoso.com/Sitelist.xml)    ※IE モードを使うためには以下ポリシー設定も必要なので合わせて有効にします。   「Internet Explorer 統合を構成する」有効にし IE モードを選択</code></pre><h4 id="1-4-既定のブラウザーの変更"><a href="#1-4-既定のブラウザーの変更" class="headerlink" title="1-4. 既定のブラウザーの変更"></a>1-4. 既定のブラウザーの変更</h4><p>上記までの作業でサイト表示に IE が必要なサイトは IE モードで表示できるになったのでもう IE は必要ありません。<br>既定のブラウザーを IE から Edge に変更します。<br><img src="/blog/internet-explorer-microsoft-edge/guidelines-for-migrating-from-ie-to-microsoft-edge/2.png" alt="既定のブラウザーの設定"></p><p>なお、既定のブラウザーの変更はグループ ポリシーで配布することも可能です。詳細は <a href="https://docs.microsoft.com/ja-jp/deployedge/edge-default-browser">こちら</a> をご覧ください。</p><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></li></ul><hr><h2 id="ステージ-2-Edge-には移行しているが、IE-モードと-IE-デスクトップ-アプリ-スタンドアロンの-IE11-を併用している"><a href="#ステージ-2-Edge-には移行しているが、IE-モードと-IE-デスクトップ-アプリ-スタンドアロンの-IE11-を併用している" class="headerlink" title="ステージ 2. Edge には移行しているが、IE モードと IE デスクトップ アプリ (スタンドアロンの IE11) を併用している"></a>ステージ 2. Edge には移行しているが、IE モードと IE デスクトップ アプリ (スタンドアロンの IE11) を併用している</h2><h4 id="2-1-IE-デスクトップ-アプリ依存サイトの洗い出し"><a href="#2-1-IE-デスクトップ-アプリ依存サイトの洗い出し" class="headerlink" title="2-1. IE デスクトップ アプリ依存サイトの洗い出し"></a>2-1. IE デスクトップ アプリ依存サイトの洗い出し</h4><p>すでに IE モードを使用している環境であれば、何等かの理由で Edge or IE モード で動作しないサイトを止むを得ず IE デスクトップ アプリで表示させているのだと思います。<br>まずは、なにが IE デスクトップ アプリから IE モードへの移行を妨げているのかを整理し、IE デスクトップ アプリ依存のサイトの改修を進めます。</p><h4 id="2-2-サイト一覧へのサイトの追加"><a href="#2-2-サイト一覧へのサイトの追加" class="headerlink" title="2-2. サイト一覧へのサイトの追加"></a>2-2. サイト一覧へのサイトの追加</h4><p>IE デスクトップ アプリ依存のサイトの改修が完了したら、既存のサイト一覧に改修したサイトを追加して IE デスクトップ アプリではなく IE モードで表示するよう定義してください。</p><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></li></ul><hr><h2 id="ステージ-3-IE-モードを部分的に利用しているが-IE-デスクトップ-アプリはもう使っていない"><a href="#ステージ-3-IE-モードを部分的に利用しているが-IE-デスクトップ-アプリはもう使っていない" class="headerlink" title="ステージ 3. IE モードを部分的に利用しているが IE デスクトップ アプリはもう使っていない"></a>ステージ 3. IE モードを部分的に利用しているが IE デスクトップ アプリはもう使っていない</h2><p>IE モードがあれば IE デスクトップ アプリは必要ない状況になったら、IE デスクトップ アプリの起動を無効化する以下ポリシーを配布し、IE モードのみを使用できるようにします。</p><pre><code>    [コンピューターの構成]or[ユーザーの構成]   ＋[管理用テンプレート]    ＋[Windows コンポーネント]     ＋[Internet Explorer]  「Internet Explorer 11 をスタンドアロンブラウザーとして無効にする」</code></pre><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></li></ul><hr><h2 id="ステージ-4-Edge-に完全に移行できており、IE-モード含めて完全に必要ない"><a href="#ステージ-4-Edge-に完全に移行できており、IE-モード含めて完全に必要ない" class="headerlink" title="ステージ 4. Edge に完全に移行できており、IE モード含めて完全に必要ない"></a>ステージ 4. Edge に完全に移行できており、IE モード含めて完全に必要ない</h2><p>IE に依存したサイトはすべて改修され、すべてのサイトを Edge で動作させることができるようになったら、IE デスクトップ アプリの機能を無効化することを検討してください。<br>「Windows の機能の有効化または無効化」にて「Internet Explorer 11」のチェックを外すことで無効化できます。<br>以下ドキュメントの「Method 1 - Use Control Panel (client systems only)」でも紹介しているので参考にしてください。</p><p><a href="https://docs.microsoft.com/en-us/troubleshoot/browsers/disable-internet-explorer-windows">Disable Internet Explorer on Windows</a> (機械翻訳版は <a href="https://docs.microsoft.com/ja-jp/troubleshoot/browsers/disable-internet-explorer-windows">こちら</a> )</p><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></li></ul><hr><p>IE デスクトップ アプリから IE モードへの移行にあたり、互換性の問題でお困りの場合は <a href="https://blogs.windows.com/japan/2021/05/19/internet-explorer-11-desktop-app-retirement-faq/">こちらの FAQ No.17</a> にある App Assure のご利用をご検討ください。</p><p>&lt;参考リンク&gt;</p><ul><li><p>Edge のポリシーを使うための情報</p><ul><li><a href="https://docs.microsoft.com/ja-jp/deployedge/configure-microsoft-edge">Windows 用に Microsoft Edge を構成する</a></li></ul></li><li><p>Edge ポリシーの一覧</p><ul><li><a href="https://docs.microsoft.com/ja-jp/deployedge/configure-microsoft-edge">Microsoft Edge ブラウザー ポリシーに関するドキュメント</a></li></ul></li><li><p>IE モードについて</p><ul><li><a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode">Internet Explorer モードとは</a></li><li><a href="https://youtu.be/XPFx4A32npk">(動画) Microsoft Edge で IE モードを使ってみよう (IT 管理者向け)</a></li></ul></li><li><p>エンタープライズ モード サイト一覧について</p><ul><li><p><a href="https://docs.microsoft.com/ja-jp/internet-explorer/ie11-deploy-guide/what-is-enterprise-mode">エンタープライズ モードとエンタープライズ モード サイト一覧 (IT 担当者向け Internet Explorer 11)</a></p></li><li><p><a href="https://docs.microsoft.com/ja-jp/internet-explorer/ie11-deploy-guide/add-multiple-sites-to-enterprise-mode-site-list-using-the-version-2-schema-and-enterprise-mode-tool">ファイルと Enterprise Mode Site List Manager (スキーマ v.2) を使ってエンタープライズ モード サイト一覧に複数のサイトを追加する (IT 担当者向け Internet Explorer 11)</a></p></li></ul></li></ul><p>それでは皆様またの機会に！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;みなさんこんにちは！&lt;/p&gt;
&lt;p&gt;Microsoft は Internet Explorer (以降 IE) デスクトップ アプリのサポートを 2022 年 6 月 15 日に終了することをブログで公開しました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs</summary>
      
    
    
    
    
    <category term="Microsoft Edge" scheme="https://jpdsi.github.io/blog/tags/Microsoft-Edge/"/>
    
    <category term="IEからEdgeへの移行" scheme="https://jpdsi.github.io/blog/tags/IE%E3%81%8B%E3%82%89Edge%E3%81%B8%E3%81%AE%E7%A7%BB%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Internet Explorer 11 デスクトップ アプリのサポート終了へ! IE モードへの移行を進めましょう!</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/internet-explorer-app-end-of-support/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/internet-explorer-app-end-of-support/</id>
    <published>2021-05-19T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.025Z</updated>
    
    <content type="html"><![CDATA[<p>みなさんこんにちは。日本マイクロソフトの IE/Edge サポートチームです。</p><p>本日、以下の情報が公開されました。<br><span style="color: #ff0000;font-weight:bold;">FAQ を含め日本語での資料が充実していますので、まず以下のふたつの公式ドキュメントを一通りご覧ください。</span></p><p><a href="https://blogs.windows.com/japan/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/">Internet Explorer は Microsoft Edge へ – Windows 10 の Internet Explorer 11 デスクトップアプリは 2022 年 6 月 15 日にサポート終了</a></p><p><a href="https://blogs.windows.com/japan/2021/05/19/internet-explorer-11-desktop-app-retirement-faq/">「Internet Explorer 11 デスクトップ アプリケーションのサポート終了」の発表に関連する FAQ</a></p><p>(英語原文)<br><a href="https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/">The future of Internet Explorer on Windows 10 is in Microsoft Edge—the Internet Explorer 11 desktop application will be retired on June 15, 2022</a></p><p><a href="https://aka.ms/IEModeFAQ">Internet Explorer 11 desktop app retirement FAQ</a></p><p>以下には上記の公式ドキュメントにある内容から要点のみ簡潔にまとめています。</p><hr><h2 id="2022-年-6-月-15-日に-Windows-10-の-Internet-Explorer-11-“デスクトップ-アプリ”-のサポートを終了し、Microsoft-Edge-に組み込まれている-“IE-モード”-で少なくとも-2029-年までは引き続きサポートします。"><a href="#2022-年-6-月-15-日に-Windows-10-の-Internet-Explorer-11-“デスクトップ-アプリ”-のサポートを終了し、Microsoft-Edge-に組み込まれている-“IE-モード”-で少なくとも-2029-年までは引き続きサポートします。" class="headerlink" title="2022 年 6 月 15 日に Windows 10 の Internet Explorer 11 “デスクトップ アプリ” のサポートを終了し、Microsoft Edge に組み込まれている “IE モード” で少なくとも 2029 年までは引き続きサポートします。"></a>2022 年 6 月 15 日に Windows 10 の Internet Explorer 11 “デスクトップ アプリ” のサポートを終了し、Microsoft Edge に組み込まれている “IE モード” で少なくとも 2029 年までは引き続きサポートします。</h2><h3 id="サポート終了対象"><a href="#サポート終了対象" class="headerlink" title="サポート終了対象"></a>サポート終了対象</h3><ul><li><span style="color: #ff0000;font-weight:bold;">半期チャネル (SAC) で配信される</span>以下の OS 上の Internet Explorer 11 デスクトップ アプリ (スタンドアロンの IE11)<ul><li>Windows 10 desktop 全エディション (20H2 およびそれ以降にリリースされるバージョン) </li><li>Windows 10 IoT (20H2 およびそれ以降にリリースされるバージョン)</li></ul></li></ul><h3 id="サポート終了対象外"><a href="#サポート終了対象外" class="headerlink" title="サポート終了対象外"></a>サポート終了対象外</h3><ul><li>IE モード</li><li>Internet Explorer platform (MSHTML / Trident) (WebBrowser コントロールの利用)</li><li>現在リリースされている 以下の OS 上の Internet Explorer 11 デスクトップ アプリ (スタンドアロンの IE11)<ul><li>Windows 8.1</li><li>Windows 7 ESU</li><li>Windows 10 Server SAC (全バージョン)</li><li>Windows 10 IoT LTSC (旧 LTSB 含む) (全バージョン)</li><li>Windows 10 Server LTSC (旧 LTSB 含む) (全バージョン)</li><li>Windows 10 client LTSC (旧 LTSB 含む) (全バージョン)</li></ul></li></ul><p>なお、上記 Windows OS のサポート終了日は <a href="https://blogs.windows.com/japan/2021/05/19/internet-explorer-11-desktop-app-retirement-faq/">こちらの “8) IE モードはいつまでサポートされますか？” の部分にある表</a> をご覧ください。</p><ul><li>IE でなければ閲覧できない古い技術を使って作成されたレガシーな Web サイトは、2022 年 6 月 15 日以降は IE モードで閲覧してください。(以下のイメージをご覧ください)</li><li>スタンドアロンの IE についてはサポートを終了しますが、IE モードは少なくとも 2029 年まではサポートされますので、IE モードへの移行、さらには Edge への移行 (HTML5 に対応したモダンなウェブ アプリへの移行) を計画的に進めていただくことをお勧めします。</li><li>IE モードのよくあるご質問は <a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/ie-mode-faq/">こちら</a> をご覧ください。</li></ul><hr><h3 id="これまで-二つのブラウザーを使い分ける"><a href="#これまで-二つのブラウザーを使い分ける" class="headerlink" title="これまで : 二つのブラウザーを使い分ける"></a>これまで : 二つのブラウザーを使い分ける</h3><p><img src="/blog/internet-explorer-microsoft-edge/internet-explorer-app-end-of-support/before.png" alt="これまで : IE と Edge Legacy のブラウザーを使い分ける"></p><h3 id="これから-一つの-Edge-を利用する"><a href="#これから-一つの-Edge-を利用する" class="headerlink" title="これから : 一つの Edge を利用する"></a>これから : 一つの Edge を利用する</h3><p><img src="/blog/internet-explorer-microsoft-edge/internet-explorer-app-end-of-support/after.png" alt="これから : IE が Edge に統合されて IE モードとして利用できる"></p><hr><h4 id="参考-関連する記事"><a href="#参考-関連する記事" class="headerlink" title="(参考) 関連する記事"></a>(参考) 関連する記事</h4><ul><li><a href="https://blogs.windows.com/japan/2021/05/19/internet-explorer-11-desktop-app-retirement-faq/">「Internet Explorer 11 デスクトップ アプリケーションのサポート終了」の発表に関連する FAQ</a></li></ul><h5 id="これまでに当サポート-チームで公開した記事"><a href="#これまでに当サポート-チームで公開した記事" class="headerlink" title="これまでに当サポート チームで公開した記事"></a>これまでに当サポート チームで公開した記事</h5><ul><li><p><a href="https://social.msdn.microsoft.com/Forums/ja-JP/47290e24-fc66-4d3e-a2de-429643758d40/internet-explorer-12398201702446012395123881235612390?forum=edgeiesupportteamja">Internet Explorer の今後について</a></p></li><li><p><a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/how-about-using-new-edge/">まだデフォルトIE？ 新しい Microsoft Edge を使いませんか？</a></p></li><li><p><a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/ie-mode-faq/">IE モードのよくあるご質問</a></p></li><li><p><a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/guidelines-for-migrating-from-ie-to-microsoft-edge/">Internet Explorer から Microsoft Edge への移行ガイドライン</a></p></li><li><p><a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/edge-ie-mode-site-list-manager/">Microsoft Edge 組み込みのサイト リスト マネージャーについて</a></p></li></ul><h5 id="その他弊社社員が作成した資料"><a href="#その他弊社社員が作成した資料" class="headerlink" title="その他弊社社員が作成した資料"></a>その他弊社社員が作成した資料</h5><ul><li><a href="https://youtu.be/XPFx4A32npk">(動画) Microsoft Edge で IE モードを使ってみよう (IT 管理者向け)</a></li><li><a href="https://www.slideshare.net/takuyaot/it-windows-10-ie11-microsoft-edge">(スライド) IT エンジニアのための 流し読み Windows 10 - IE11 のサポート終了と Microsoft Edge について</a></li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;みなさんこんにちは。日本マイクロソフトの IE/Edge サポートチームです。&lt;/p&gt;
&lt;p&gt;本日、以下の情報が公開されました。&lt;br&gt;&lt;span style=&quot;color: #ff0000;font-weight:bold;&quot;&gt;FAQ を含め日本語での資料が充実しています</summary>
      
    
    
    
    
    <category term="Microsoft Edge" scheme="https://jpdsi.github.io/blog/tags/Microsoft-Edge/"/>
    
    <category term="Internet Explorer" scheme="https://jpdsi.github.io/blog/tags/Internet-Explorer/"/>
    
    <category term="IE モード" scheme="https://jpdsi.github.io/blog/tags/IE-%E3%83%A2%E3%83%BC%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>IE モードのよくあるご質問</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/ie-mode-faq/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/ie-mode-faq/</id>
    <published>2021-05-13T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.025Z</updated>
    
    <content type="html"><![CDATA[<p>更新履歴:<br>2021/05/14 新規<br>2021/05/19 更新: 追記しました</p><hr><p>みなさんこんにちは。日本マイクロソフトの IE/Edge サポートチームです。</p><p>これまでに「IE モード」について以下の２つのブログ記事を公開していますが、今回はよくあるご質問についてまとめたいと思います。</p><p>新しいバージョンの Microsoft Edge の “IE モード” について<br><a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/IEMode/">https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/IEMode/</a></p><p>まだデフォルトIE？ 新しい Microsoft Edge を使いませんか？<br><a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/how-about-using-new-edge/">https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/how-about-using-new-edge/</a></p><p>なお、IE モードに関する公式ドキュメントは以下にまとまっていますので、基本的な内容についてはこちらをご覧ください。</p><p>Internet Explorer (IE) モードとは<br><a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode">https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode</a></p><p>IE モードのトラブルシューティングと FAQ<br><a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-faq">https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-faq</a></p><hr><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li><a href="#Web-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%81%AE%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E6%96%B9%E6%B3%95">Web コンテンツのデバッグ方法</a></li><li><a href="#window-open-%E3%81%AB%E3%82%88%E3%82%8B%E5%AD%90%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6%E3%81%AE%E6%89%B1%E3%81%84">window.open による子ウィンドウの扱い</a></li><li><a href="#Cookie-%E3%81%AE%E5%85%B1%E6%9C%89">Cookie の共有</a></li><li><a href="#%E3%83%9A%E3%83%BC%E3%82%B8%E9%81%B7%E7%A7%BB%E6%99%82%E3%81%AE%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%83%BC-%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%81%AE%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88">ページ遷移時のブラウザー エンジンの切り替え</a></li><li><a href="#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%83%BC-%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%81%AE%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E6%99%82%E3%81%AE%E9%80%9A%E4%BF%A1%E3%81%A7%E8%B5%B7%E3%81%93%E3%82%8B%E3%81%93%E3%81%A8">ブラウザー エンジンの切り替え時の通信で起こること</a></li><li><a href="#IE-%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E3%81%AE%E8%A1%A8%E7%A4%BA%E3%82%92%E3%83%86%E3%82%B9%E3%83%88%E3%81%97%E3%81%9F%E3%81%84">IE モードでの表示をテストしたい</a></li><li><a href="#%E3%82%B5%E3%82%A4%E3%83%88%E3%83%AA%E3%82%B9%E3%83%88%E3%81%A7%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%82%B5%E3%82%A4%E3%83%88%E3%81%8C-IE-%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84">サイトリストで指定しているサイトが IE モードで表示されない</a></li><li><a href="#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88-%E3%83%A2%E3%83%BC%E3%83%89%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%9F%E3%81%84">ドキュメント モードを確認したい</a></li><li><a href="#%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%88%E3%83%A9%E3%83%AB-%E3%82%B5%E3%82%A4%E3%83%88">ニュートラル サイト</a></li></ul><hr><h2 id="Web-コンテンツのデバッグ方法"><a href="#Web-コンテンツのデバッグ方法" class="headerlink" title="Web コンテンツのデバッグ方法"></a>Web コンテンツのデバッグ方法</h2><p>Microsoft Edge の IE11 モードでは、IE11 のブラウザー エンジンで表示する必要のある Web サイトを Microsoft Edge 上のタブ内で表示しますが、IE モードで表示されている Web コンテンツに対して、Microsoft Edge の F12 開発者ツールを使用することはできません。<br>IE モードで表示されている Web コンテンツをデバッグするには、IEChooser (Microsoft Edge 開発者ツール) を使用します。具体的には、以下の手順にてデバッグ作業を行います。</p><p>※ このトピックは、Windows 10 および Windows Server 2016、Windows Server 2019 以上の環境を前提としています。Windows 8.1 および Windows Server 2012 R2 以前の Windows プラットフォームについては、恐れ入りますが、後述の方法で IE モードで表示されている Web コンテンツをデバッグすることはできません。</p><ol><li>Microsoft Edge 上で、IE モードの Web コンテンツを表示します。</li><li>%WINDIR%\System32\F12 フォルダー内にある、IEChooser.exe (Windows 10 のバージョン 1709 以前、および Windows Server 2016 では F12Chooser.exe) を起動します。</li><li>以下のようなウィンドウが表示されますので、IE モードで表示されている Web コンテンツをクリックします。<br>なお、以下のウィンドウ内には、IE11 および IE モードで表示されている Web コンテンツのファイル名またはタイトルが表示されますので、その情報を基に対象の Web コンテンツを選択します。</li></ol><p><img src="/blog/internet-explorer-microsoft-edge/ie-mode-faq/IEChooser1.png" alt="ターゲットの選択"></p><ol start="4"><li>開発者ツールが起動しますので、Web コンテンツをデバッグします。</li></ol><p><img src="/blog/internet-explorer-microsoft-edge/ie-mode-faq/IEChooser2.png" alt="開発者ツール画面"></p><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></li></ul><hr><h2 id="window-open-による子ウィンドウの扱い"><a href="#window-open-による子ウィンドウの扱い" class="headerlink" title="window.open による子ウィンドウの扱い"></a>window.open による子ウィンドウの扱い</h2><p>Microsoft Edge の IE11 モードでは、IE11 のブラウザー エンジンで表示する必要のある Web サイトを Microsoft Edge 上のタブ内で表示しますが、IE モードで表示されている Web コンテンツ内で window.open() メソッドを実行して表示される子ウィンドウは新しい Microsoft Edge のウィンドウとなります。</p><p>IE モードでは、Web ページ コンテンツの表示 (レンダリング) やスクリプトは IE11 のブラウザー エンジンによって処理されますが、ブラウザー ウィンドウとしての外枠 (フレーム) 部分は Microsoft Edge によって制御されます。具体的には、以下の図の緑色の枠線内は IE モードによって処理されますが、枠の外側は Microsoft Edge によって処理されます。</p><p><img src="/blog/internet-explorer-microsoft-edge/ie-mode-faq/windowopen1.png" alt="ウィンドウの構造"></p><p>上記動作に伴い、window.open(url, windowName, windowFeatures) の引数 windowFeatures で指定する以下のオプションは反映されません。<br>なお、この動作は Microsoft Edge における想定された動作となります。</p><ul><li><p>location<br>引数 url で指定されるサイトがローカル イントラネットや信頼済みサイト ゾーンで、かつ、引数 windowFeatures において location=no と指定していても、以下のようにアドレス バーは表示されます (ただし、アドレス バーでの操作はできません)。<br><img src="/blog/internet-explorer-microsoft-edge/ie-mode-faq/windowopen2.png" alt="画面例"></p></li><li><p>resizable<br>resizable オプション指定は常に無視され、ユーザーはウィンドウ サイズを変更することができます。</p></li><li><p>fullscreen<br>fullscreen オプション指定は常に無視され、全画面表示とはなりません。</p></li></ul><p>(参考情報)<br>window.open - Web API | MDN<br><a href="https://developer.mozilla.org/ja/docs/Web/API/Window/open">https://developer.mozilla.org/ja/docs/Web/API/Window/open</a></p><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></li></ul><hr><h2 id="Cookie-の共有"><a href="#Cookie-の共有" class="headerlink" title="Cookie の共有"></a>Cookie の共有</h2><p>以下のドキュメントに詳細がまとまっていますが、<span style="color: #ff0000">セッション Cookie</span> に関して、Edge から IE モードにのみ共有することができます。<br><span style="color: #ff0000">セッション Cookie</span>を逆方向へ (IE モードから Edge へ) 共有することはできません。</p><p>Microsoft Edge から Internet Explorer への Cookie の共有<br><a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-add-guidance-cookieshare">https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-add-guidance-cookieshare</a></p><p><span style="color: #ff0000;font-weight:bold;">※ 共有できる Cookie の種類は、有効期限のある永続 Cookie ではなく、有効期間のないセッション Cookie のみですのでご注意ください。</span></p><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></li></ul><hr><h2 id="ページ遷移時のブラウザー-エンジンの切り替え"><a href="#ページ遷移時のブラウザー-エンジンの切り替え" class="headerlink" title="ページ遷移時のブラウザー エンジンの切り替え"></a>ページ遷移時のブラウザー エンジンの切り替え</h2><p>以下のポリシーの設定状態によって、IE モードで表示しているページからの遷移時の動作が変わります。</p><p>InternetExplorerIntegrationSiteRedirect<br><a href="https://docs.microsoft.com/ja-jp/deployedge/microsoft-edge-policies#internetexplorerintegrationsiteredirect">https://docs.microsoft.com/ja-jp/deployedge/microsoft-edge-policies#internetexplorerintegrationsiteredirect</a></p><p>実際の動きをみてみましょう。(ポリシー変更後はいったん Edge を再起動させてください)</p><p>サイトリストには以下のふたつの URL を登録した状態にします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;site url=&quot;docs.microsoft.com/ja-jp/deployedge/edge-ie-mode&quot;&gt;</span><br><span class="line">&lt;open-in&gt;IE11&lt;/open-in&gt;</span><br><span class="line">&lt;/site&gt;</span><br><span class="line">&lt;site url=&quot;aka.ms&quot;&gt;</span><br><span class="line">&lt;open-in&gt;IE11&lt;/open-in&gt;</span><br><span class="line">&lt;/site&gt;</span><br></pre></td></tr></table></figure><p>このサイトリストが反映された状態で以下の A, B の操作をすると、ポリシーの設定状態によって下記のとおりになります。</p><p>A) <a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode">https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode</a> を (IE モードで) 開いたあと、ページ左側の目次から任意の別のページを開く<br>B) <a href="https://aka.ms/windows/releaseinfo">https://aka.ms/windows/releaseinfo</a> を開く</p><ul><li><p>未構成もしくは既定<br>A, B) 遷移先のページが Edge モードで表示される。</p></li><li><p>自動ナビゲーションのみを Internet Explorer モードで維持する<br>A) 遷移先のページが Edge モードで表示される。<br>B) 遷移先のページが IE モードで表示される。</p></li><li><p>すべてのページ内ナビゲーション を Internet Explorer モードで維持する<br>A, B) 遷移先のページが IE モードで表示される。</p></li><li><p><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></p></li></ul><hr><h2 id="ブラウザー-エンジンの切り替え時の通信で起こること"><a href="#ブラウザー-エンジンの切り替え時の通信で起こること" class="headerlink" title="ブラウザー エンジンの切り替え時の通信で起こること"></a>ブラウザー エンジンの切り替え時の通信で起こること</h2><p>ブラウザー エンジンの切り替え時 (Edge から IE モード、およびその逆) の通信は以下のようになります。</p><ul><li>POST メソッドが GET メソッドになる</li><li>HTTP リクエスト ヘッダーに Referrer が含まれない</li></ul><p>ページ遷移時に POST リクエストではなく GET リクエストが Web サーバーに送信されている場合には、こちらの制限に該当していると言えます。<br>POST リクエストが GET リクエストとなる動作は、異なるプロセス間での POST データのやり取りに対するセキュリティ的な懸念の観点と、技術的な制約からなる想定された動作となり、この動作を変更することはできません。</p><p>元のページから POST リクエストで通信を行った場合は GET リクエストに変わるため、POST リクエストの body に含まれる内容は消失します。<br>対処策としては、データを引き渡す必要がないように、関連する一連のページをすべて IE モードで表示するか、Edge で開けるように統一するかのどちらかとなります。</p><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></li></ul><hr><h2 id="IE-モードでの表示をテストしたい"><a href="#IE-モードでの表示をテストしたい" class="headerlink" title="IE モードでの表示をテストしたい"></a>IE モードでの表示をテストしたい</h2><p>IE モードのテストのために、毎回サイトリストを書き替えたり、ポリシーを設定しなおすことは大変な手間がかかります。<br>この手間を解消するために、以下の A, B どちらかの方法でメニューから IE モードもしくは Edge モードを切り替え、コンテンツを表示することが可能です。</p><p><span style="color: #ff0000">これらの機能はテストを目的に用意されており、意図しないサイトで IE モードを利用することは、想定しない ActiveX の実行など、セキュリティのリスクがありますので十分ご注意ください。</span></p><p>A) InternetExplorerIntegrationTestingAllowed ポリシーを有効に設定する<br><a href="https://docs.microsoft.com/ja-jp/deployedge/microsoft-edge-policies#internetexplorerintegrationtestingallowed">https://docs.microsoft.com/ja-jp/deployedge/microsoft-edge-policies#internetexplorerintegrationtestingallowed</a></p><p>B) “–ie-mode-test” オプションを付加して msedge.exe を実行する<br>実行例)<br>“C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe” –ie-mode-test</p><p>これらの方法を利用することで、ポリシーの説明にもあるように [その他のツール] 以下に、[サイトを Internet Explorer モードで開く]、[サイトを Edge モードで開く] メニューが表示されます。<br><img src="/blog/internet-explorer-microsoft-edge/ie-mode-faq/iemodetest.png" alt="選択したモードで開く操作"></p><p>なお、テストモードの利用は IE モードが構成されていることが前提となります。以下のドキュメントでもご案内している手順にて、IE モードを有効に設定してください。</p><p>グループ ポリシーを使用して Internet Explorer 統合を有効にする<br><a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-policies#enable-internet-explorer-integration-using-group-policy">https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-policies#enable-internet-explorer-integration-using-group-policy</a></p><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></li></ul><hr><h2 id="サイトリストで指定しているサイトが-IE-モードで表示されない"><a href="#サイトリストで指定しているサイトが-IE-モードで表示されない" class="headerlink" title="サイトリストで指定しているサイトが IE モードで表示されない"></a>サイトリストで指定しているサイトが IE モードで表示されない</h2><p>まずは edge://compat を開いて、Edge が読み込んでいるサイトリストの内容を確認します。</p><p><img src="/blog/internet-explorer-microsoft-edge/ie-mode-faq/compat_enterprise.png" alt="Edge が読み込んでいるサイトリストの内容"></p><p>確認ポイント</p><ul><li>URL 一覧の中に、IE モードで表示したい項目が存在するか。</li><li>対象のサイトについて “エンジン” が “IE11” となっているか。</li><li>“エンジン”が “ニュートラル” となっている場合、遷移元のページが IE モードで表示されているか。</li></ul><p>もし想定していない状態であれば、なぜ意図したサイトリストが利用されていないのかを掘り下げていきます。</p><p>確認ポイント</p><ul><li>サイトリストのバージョンを更新したか。</li><li><a href="https://docs.microsoft.com/ja-jp/internet-explorer/ie11-deploy-guide/enterprise-mode-schema-version-2-guidance">エンタープライズ モード スキーマ v.2 ガイダンス</a> に沿っているか。</li><li>シンプルに１つだけ登録した状態であれば、Edge に反映されるか。</li></ul><p>サイトリストの内容には問題がない場合、edge://compat/iediagnostic を開いて、ポリシーの設定状態を確認します。</p><p><img src="/blog/internet-explorer-microsoft-edge/ie-mode-faq/compat_iediagnostic.png" alt="診断情報の画面"><br><img src="/blog/internet-explorer-microsoft-edge/ie-mode-faq/compat_iediagnostic2.png" alt="診断情報の画面"></p><p>確認ポイント</p><ul><li>“Internet Explorer モードの設定” で上記のようになっているかどうか。</li><li>“グループ ポリシーの設定” が想定したとおりになっているかどうか。</li></ul><p>設定について <a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-policies">IE モード ポリシーの構成</a> のドキュメントをみながら構成を確認します。</p><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></li></ul><hr><h2 id="ドキュメント-モードを確認したい"><a href="#ドキュメント-モードを確認したい" class="headerlink" title="ドキュメント モードを確認したい"></a>ドキュメント モードを確認したい</h2><p>アドレス バーの横にある IE モードのアイコンをクリックすると確認できます。</p><p><img src="/blog/internet-explorer-microsoft-edge/ie-mode-faq/docmode.png" alt="ドキュメント モードなどの確認"></p><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></li></ul><hr><h2 id="ニュートラル-サイト"><a href="#ニュートラル-サイト" class="headerlink" title="ニュートラル サイト"></a>ニュートラル サイト</h2><p>ニュートラルの機能は、<font color="red">その URL に遷移してきた際の直前のブラウザーを維持することです。</font><br>つまり、Edge で遷移してきた場合には Edge を維持し、IE モードで遷移してきた場合には IE モードを維持するにようにできます。</p><p>以下のような場面で利用します。</p><h3 id="認証がうまくいかないケース"><a href="#認証がうまくいかないケース" class="headerlink" title="認証がうまくいかないケース"></a>認証がうまくいかないケース</h3><p>IE モードを利用するとき『認証がうまくいかない』というお問い合せをよくいただきますので、ここで紹介します。</p><p>認証がうまくいかないという話では <a href="../cross-protected-mode-cookie/">保護モードをまたいだ Cookie について</a> という記事で、Azure AD (AAD) 認証を必要とする Web アプリケーションを例としました。<br>対象の Web アプリケーションのドメインと認証時にアクセスする login.microsoftonline.com が異なったセキュリティ ゾーンに属していた場合、認証済みを示す Cookie がリクエストに含まれないことで、ユーザーがログオンしていないと判断され、再度認証を求められてしまうという現象を解説しました。</p><p>IE モードを利用するとき『どの URL を IE モードで表示するか』を設定しますが、対象の Web アプリケーションの URL に加えて、**<font color="red">認証サーバー / シングル サインオン サーバーに対してのアクセスも IE モードで動作するように明示的に構成する</font>** 必要があります。<br>認証サーバーも含めておかないと、以下のように IE モードと Edge とで行き来するときに認証に必要な Cookie が共有されずに認証ができません。</p><ol><li>対象の Web アプリケーションの URL にアクセスします。(IE モードで動作します)</li><li>認証のために認証サーバーにアクセスします。(Edge で通信します)</li><li>Edge 側で認証済みを示す Cookie を受け取ります。</li><li>対象の Web アプリケーションにリダイレクトしますが、ここで IE モードに切り替わります。</li><li>IE モードとしては認証済みを示す Cookie を持っていないので、Cookie なしの状態でリクエストすることになります。</li><li>認証済みを示す Cookie がリクエストに含まれないことで、ユーザーがログオンしていないと判断され、再度認証を求められます。</li></ol><p>ただ、認証時に通信するサーバーをすべて IE モードで動作するように明示的に指定してしまうと、逆に Edge でアクセスする必要があるパターンでうまくいきません。</p><p>具体例として、Azure AD (AAD) 認証を必要とする Web アプリケーションとして Office.com を使って試してみます。<br>(本来は IE モードを使わずに Edge でご覧いただくことをおすすめします)</p><p>まずは以下のように対象サイト (office.com) だけを登録してみます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;site url=&quot;office.com&quot;&gt;</span><br><span class="line">    &lt;open-in&gt;IE11&lt;/open-in&gt;</span><br><span class="line">&lt;/site&gt;</span><br></pre></td></tr></table></figure><p>このサイト リストを読み込んで、office.com にアクセスすると IE モードで開きます。<br>サインインの操作をしてみるとわかりますが、サインインが完了しません。(場合によっては、認証画面の表示がループしてしまうこともあります)<br>これは、上述のとおり、認証済みを示す Cookie がリクエストに含まれないことで、ユーザーがログオンしていないと判断されたためです。</p><p>そこで以下のように、今回の認証時に経由する可能性がある、login.microsoftonline.com, login.windows.net, login.live.com に対しても IE モードになるように &lt;open-in&gt;IE11&lt;/open-in&gt; を設定してみます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;site url=&quot;office.com&quot;&gt;</span><br><span class="line">    &lt;open-in&gt;IE11&lt;/open-in&gt;</span><br><span class="line">&lt;/site&gt;</span><br><span class="line">&lt;site url=&quot;login.microsoftonline.com&quot;&gt;</span><br><span class="line">    &lt;open-in&gt;IE11&lt;/open-in&gt;</span><br><span class="line">&lt;/site&gt;</span><br><span class="line">&lt;site url=&quot;login.windows.net&quot;&gt;</span><br><span class="line">    &lt;open-in&gt;IE11&lt;/open-in&gt;</span><br><span class="line">&lt;/site&gt;</span><br><span class="line">&lt;site url=&quot;login.live.com&quot;&gt;</span><br><span class="line">    &lt;open-in&gt;IE11&lt;/open-in&gt;</span><br><span class="line">&lt;/site&gt;</span><br></pre></td></tr></table></figure><p>これにより、認証時に通信するサーバーすべてが IE モードで動作し、認証完了まで進みます。</p><p>それでは、この状態で <a href="https://outlook.live.com/owa/">Outlook on the web (OWA)</a> を開いてみましょう。<br>OWA は IE モードで開くように登録をしていないので、通常の Edge で開きます。<br>サインインをしようとすると、login.live.com が IE モードとして登録されているので、サインイン画面が IE モードで開きます。<br>アカウント情報を入力してみると…</p><p>エラーになってしまいました :(</p><p><img src="/blog/internet-explorer-microsoft-edge/ie-mode-faq/owa.png" alt="サインインのエラー画面"></p><p>認証サーバー (login.microsoftonline.com, login.windows.net, login.live.com) を IE モードの対象から外せば、OWA は開きます。<br>でもそうすると、先ほどの Office.com がまたダメになってしまいます。</p><p>どちらもうまくいくように構成するにはどうしたらよいか…</p><p><strong><font color="red">Edge と IE のどちらからも経由され得るサイトを『ニュートラル』に登録することで解決できます！</font></strong></p><p>冒頭に記述したように、ニュートラルの機能は、<font color="red">その URL に遷移してきた際の直前のブラウザーを維持することです。</font><br>つまり、Edge で遷移してきた場合には Edge を維持し、IE モードで遷移してきた場合には IE モードを維持するにようにできます。</p><p>それでは、先ほどのサイト リストを以下のように認証サーバー (login.microsoftonline.com, login.windows.net, login.live.com) に対してそれぞれ &lt;open-in&gt;None&lt;/open-in&gt; に変えます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;site url=&quot;office.com&quot;&gt;</span><br><span class="line">    &lt;open-in&gt;IE11&lt;/open-in&gt;</span><br><span class="line">&lt;/site&gt;</span><br><span class="line">&lt;site url=&quot;login.microsoftonline.com&quot;&gt;</span><br><span class="line">    &lt;open-in&gt;None&lt;/open-in&gt;</span><br><span class="line">&lt;/site&gt;</span><br><span class="line">&lt;site url=&quot;login.windows.net&quot;&gt;</span><br><span class="line">    &lt;open-in&gt;None&lt;/open-in&gt;</span><br><span class="line">&lt;/site&gt;</span><br><span class="line">&lt;site url=&quot;login.live.com&quot;&gt;</span><br><span class="line">    &lt;open-in&gt;None&lt;/open-in&gt;</span><br><span class="line">&lt;/site&gt;</span><br></pre></td></tr></table></figure><p>こうすると、IE モードで開く Office.com から認証サーバーにアクセスするときは IE モードが維持され、Edge で開く OWA から認証サーバーにアクセスするときは Edge が維持されますので、認証処理の途中でモードが変わってしまうことを回避できます。</p><p>なお、下記ドキュメントの「ニュートラル サイトを構成する」の部分にも記載がありますが、上記の例のように Edge と IE のどちらからも経由され得るサイトはすべてニュートラルに登録する必要があります。</p><p>エンタープライズ モード サイト リストでのサイトの構成<br><a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-sitelist">https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-sitelist</a></p><p>一時的な対応策としては [Internet Explorer モード ページから起動したときに未構成サイトへの「ページ内」ナビゲーションの動作を指定する] というポリシーが利用できますので、状況に合わせた対応をご検討いただければと思います。</p><p>Internet Explorer モードでページ内ナビゲーションを保持する<br><a href="https://docs.microsoft.com/ja-jp/deployedge/edge-learnmore-inpage-nav">https://docs.microsoft.com/ja-jp/deployedge/edge-learnmore-inpage-nav</a></p><ul><li><a href="#%E7%9B%AE%E6%AC%A1">目次へ</a></li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;更新履歴:&lt;br&gt;2021/05/14 新規&lt;br&gt;2021/05/19 更新: 追記しました&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;みなさんこんにちは。日本マイクロソフトの IE/Edge サポートチームです。&lt;/p&gt;
&lt;p&gt;これまでに「IE モード」について以下の２つのブログ記事を公</summary>
      
    
    
    
    
    <category term="Microsoft Edge" scheme="https://jpdsi.github.io/blog/tags/Microsoft-Edge/"/>
    
    <category term="IE モード" scheme="https://jpdsi.github.io/blog/tags/IE-%E3%83%A2%E3%83%BC%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>Internet Explorer および Microsoft Edge での Flash の今後の対応について</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/flash/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/flash/</id>
    <published>2021-04-27T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.021Z</updated>
    
    <content type="html"><![CDATA[<p>更新履歴:<br>2020/9/9 更新: 今後に関する最新情報を追記しました。<br>2020/10/28 更新: Update for Removal of Adobe Flash Player がリリースされました。<br>2020/10/30 更新: Flash のブロックに関して追記しました。<br>2020/11/06 更新: 古くなった情報を削除し、最新情報を見やすくしました。よくあるお問い合わせを追記しました。<br>2020/12/09 更新: Adobe 社の公開情報をもとに、『Flash の既定で無効化』について追記しました。<br>2021/1/5 更新 : 2020 年 12 月末をもって Adobe Flash Player のサポートを終了しました。<br>2021/1/12 更新 : 『Flash の実行ブロック』について内容を更新しました。<br>2021/4/28 更新 : KB4577586 (Update for Removal of Adobe Flash Player) について更新しました。</p><hr><p><span style="color: #ff0000;font-weight:bold;">弊社も Adobe 社も 2020 年 12 月末をもって Adobe Flash Player のサポート (お問い合わせの受付やセキュリティ更新の提供) を終了しました。セキュリティの観点からは 2021 年夏予定の Flash の永久削除を待つのではなく、『Update for Removal of Adobe Flash Player』を使用してできる限り早急に自発的に Flash を永久削除することをお勧めしています。<br></span></p><hr><p>2020 年 9 月 4 日に今後の最新情報が公開されました。以下に概要をまとめます。</p><blockquote><p>Update on Adobe Flash Player End of Support<br><a href="https://blogs.windows.com/msedgedev/2020/09/04/update-adobe-flash-end-support/">https://blogs.windows.com/msedgedev/2020/09/04/update-adobe-flash-end-support/</a></p></blockquote><blockquote><p>Adobe Flash Player のサポート終了に関する最新情報<br><a href="https://blogs.windows.com/japan/2020/09/14/update-adobe-flash-end-support/">https://blogs.windows.com/japan/2020/09/14/update-adobe-flash-end-support/</a></p></blockquote><ul><li>これまでの予定と変わりなく、<span style="color: #ff0000;font-weight:bold;">Adobe Flash Player のサポート終了は 2020 年 12 月 31 日です。</span></li><li>それ以降の法人向け対応サポートについては、<a href="https://www.adobe.com/jp/products/flashplayer/enterprise-end-of-life.html">Adobe 社の情報</a>をご覧ください。</li><li><a href="https://www.adobe.com/jp/products/flashplayer/enterprise-end-of-life.html">Adobe 社の情報</a>で案内される法人向け対応サポート契約を結び、今まで弊社から提供をしてきた Adobe Flash Player に代わるプラグインの提供を受けた場合、それを『Internet Explorer 11』 および 『Microsoft Edge (Chromium 版) の IE モード』で動作させることができますが、『サードパーティー製のプラグイン』の扱いとなり弊社でのサポートはありません。</li><li><a href="https://docs.microsoft.com/en-us/DeployEdge/microsoft-edge-release-schedule">2021 年 1 月リリース予定</a> の Microsoft Edge (Chromium 版) の <a href="https://docs.microsoft.com/en-us/microsoft-edge/web-platform/site-impacting-changes">バージョン 88 にて Flash が削除される予定</a> です。</li><li>2020 年末以降は、 Microsoft Edge (EdgeHTML 版) と Internet Explorer 向けの『Adobe Flash Player のセキュリティ更新プログラム』の提供はありません。</li><li>2021 年 1 月初旬に、Microsoft Edge (EdgeHTML 版) と Internet Explorer で Flash は既定で無効化され、また、2020 年 6 月リリースの <a href="https://support.microsoft.com/ja-jp/help/4561600/security-update-for-adobe-flash-player">KB4561600</a> より古いバージョンの実行はブロックされます。</li><li>Windows OS のコンポーネントとしての Flash を永久的に削除するための『<a href="https://support.microsoft.com/en-us/help/4577586/update-for-removal-of-adobe-flash-player">KB4577586 Update for Removal of Adobe Flash Player</a>』というタイトルの更新プログラムがリリース予定です。<span style="color: #ff0000;font-weight:bold;">この更新を適用したあとは元に戻すことはできません。</span></li><li>2020 年 10 月 28 日 (日本時間) から『<a href="https://support.microsoft.com/en-us/help/4577586/update-for-removal-of-adobe-flash-player">KB4577586 Update for Removal of Adobe Flash Player</a>』を <a href="https://www.catalog.update.microsoft.com/search.aspx?q=4577586">Microsoft Update カタログから入手</a> できるようになりました。2020 年 12 月 31 日のサポート終了より前に Flash を永久削除したい場合は、カタログから更新プログラムを入手して実行できます。</li><li>『<a href="https://support.microsoft.com/en-us/help/4577586/update-for-removal-of-adobe-flash-player">KB4577586 Update for Removal of Adobe Flash Player</a>』は、2021 年の初めに Windows Update (オプション) と WSUS で配信予定で、その 2 ～ 3 か月後には Windows Update では推奨として配信予定です。</li></ul><p>ロールアップ更新への組み込みについて<br>以下のスケジュールで各更新プログラムに『<a href="https://support.microsoft.com/en-us/help/4577586/update-for-removal-of-adobe-flash-player">KB4577586 Update for Removal of Adobe Flash Player</a>』が組み込まれ、<span style="color: #ff0000;font-weight:bold;">更新プログラムの適用により Flash が永久的に削除されます。</span></p><ul><li>(Windows 10 LTSC 2019 および Windows 10 1909 以上, Windows Server 2019) 2021 年 6 月のプレビューのロールアップ更新から</li><li>(Windows 10 LTSB 2015, LTSC 2016, Windows Server 2016) 2021 年 7 月のロールアップ更新から</li><li>(Windows 8.1, Windows Server 2012 R2, Windows Server 2012 and Windows Embedded 8 Standard) 2021 年 7 月から (マンスリー ロールアップおよびセキュリティのみの更新)</li></ul><h4 id="Adobe-社公開情報"><a href="#Adobe-社公開情報" class="headerlink" title="Adobe 社公開情報"></a>Adobe 社公開情報</h4><p>Adobe Flash Player法人向けサポート終了情報ページ<br><a href="https://www.adobe.com/jp/products/flashplayer/enterprise-end-of-life.html">https://www.adobe.com/jp/products/flashplayer/enterprise-end-of-life.html</a></p><p>Update for Enterprise Customers Using Adobe Flash Player<br><a href="https://blog.adobe.com/en/fpost/2020/update-for-enterprise-adobe-flash-player.html">https://blog.adobe.com/en/fpost/2020/update-for-enterprise-adobe-flash-player.html</a></p><p>Adobe Flash Playerサポート終了情報ページ<br><a href="https://www.adobe.com/jp/products/flashplayer/end-of-life.html">https://www.adobe.com/jp/products/flashplayer/end-of-life.html</a></p><hr><h2 id="よくあるお問い合わせ"><a href="#よくあるお問い合わせ" class="headerlink" title="よくあるお問い合わせ"></a>よくあるお問い合わせ</h2><p>Flash に関して弊社のサポートは終了いたしました。<br>サポート期間中に弊社サポートへよくお問い合わせいただいたご質問についてまとめておりますが、2021 年以降の Flash の実行はお勧めできません。セキュリティの観点からは 2021 年夏予定の Flash の永久削除を待つのではなく、『Update for Removal of Adobe Flash Player』を使用してできる限り早急に自発的に Flash を永久削除することをお勧めします。</p><h3 id="全般"><a href="#全般" class="headerlink" title="全般"></a>全般</h3><p>Q. 2021 年 1 月以降、Flash を使い続けるにはどうしたらいいですか？<br>A. Adobe Flash Player のサポート終了は 2020 年 12 月 31 日です。それ以降に使い続ける方法について、弊社ではサポートできません。2021 年以降の法人向け対応サポートについては、<a href="https://www.adobe.com/jp/products/flashplayer/enterprise-end-of-life.html">Adobe 社の情報</a> をご覧ください。</p><h3 id="『Flash-の実行ブロック』について"><a href="#『Flash-の実行ブロック』について" class="headerlink" title="『Flash の実行ブロック』について"></a>『Flash の実行ブロック』について</h3><p>Q. ブロックとは具体的にどのような動作ですか？<br>A. サイレントに Flash の実行がブロックされます。</p><p>Q. どうすれば回避できますか？<br>A. <a href="https://support.microsoft.com/ja-jp/help/4561600/security-update-for-adobe-flash-player">KB4561600</a> 以上の Adobe Flash Player のセキュリティ更新プログラムを適用してください。<br>なお、現在入手可能な Adobe Flash Player のセキュリティ更新プログラムは、KB4561600 を置き換える <a href="https://support.microsoft.com/ja-jp/help/4580325/security-update">KB4580325</a> が最新です。KB4561600 もしくは KB4580325 のいずれかがインストールされている環境であれば、『Flash の実行ブロック』の対象外です。</p><p>Q. Adobe Flash Player のセキュリティ更新プログラムは、OS のロールアップ更新プログラムに含まれますか？<br>A. 含まれません。独立した更新プログラムです。前提条件などは更新プログラムの公開ドキュメントをご確認ください。</p><h3 id="『Flash-の既定で無効化』について"><a href="#『Flash-の既定で無効化』について" class="headerlink" title="『Flash の既定で無効化』について"></a>『Flash の既定で無効化』について</h3><p>Q. ブロックとは別ですか？<br>A. はい。『ブロック』はブラウザー側の動作であり、『無効化』は Adobe Flash Player による動作です。</p><p>Q. どうすれば回避できますか？<br>A. <a href="https://www.adobe.com/jp/products/flashplayer/enterprise-end-of-life.html">Adobe 社の公開ドキュメント (Adobe Flash Player法人向けサポート終了情報ページ)</a> 内の「デフォルトでFlashの再生をブロック」「Flash Playerは2020年末を過ぎても動作しますか？」をご確認ください。</p><p>Q. 無効化に関してサポートしてほしいのですが。<br>A. <a href="https://www.adobe.com/jp/products/flashplayer/enterprise-end-of-life.html">Adobe 社の公開ドキュメント (Adobe Flash Player法人向けサポート終了情報ページ)</a> の内容も含め、Adobe 社へお問い合わせいただくようお願いしています。</p><p>Q. いつから無効化されますか？<br>A. <a href="https://www.adobe.com/jp/products/flashplayer/end-of-life.html">Adobe 社の公開ドキュメント</a> をご覧ください。</p><h3 id="『Update-for-Removal-of-Adobe-Flash-Player』について"><a href="#『Update-for-Removal-of-Adobe-Flash-Player』について" class="headerlink" title="『Update for Removal of Adobe Flash Player』について"></a>『Update for Removal of Adobe Flash Player』について</h3><p>Q. 今後のスケジュールについて教えてください。<br>A. 2021 年の初めに Windows Update (オプション) と WSUS で配信予定で、その 2 ～ 3 か月後には Windows Update では推奨として配信予定です。2021 年夏には、Windows 10 での OS のロールアップ更新プログラム、および Windows 8.1, Windows Server 2012 and Windows Embedded 8 Standard での Internet Explorer 用の累積的なセキュリティ更新プログラムやマンスリー ロールアップの一部としてが組み込まれます。</p><p>Q. WSUS に配信される前に展開することは可能ですか？<br>A. はい。手動で WSUS にインポートを行い、配信することが可能です。</p><p>Q. 更新の適用時に OS の再起動は必要ですか？<br>A. 必要に応じて求められる場合があります。</p><p>Q. 更新の適用後にアンインストールできますか？ (Flash が存在する状態に戻せますか？)<br>A. できません。更新適用前に作成した復元ポイントから OS を復元するか、OS の再インストールが必要です。</p><p>Q. Windows 7 のときのようにユーザーが個別に Flash をインストールすることはできますか？<br>A. できません。</p><p>Q. Microsoft Edge (Chromium 版) に影響しますか？<br>A. 影響しません。Microsoft Edge (Chromium 版) は 2021 年 1 月リリース予定のバージョン 88 にて Flash が削除される予定です。それ以前のバージョンはそのままになります。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;更新履歴:&lt;br&gt;2020/9/9 更新: 今後に関する最新情報を追記しました。&lt;br&gt;2020/10/28 更新: Update for Removal of Adobe Flash Player がリリースされました。&lt;br&gt;2020/10/30 更新: Flash の</summary>
      
    
    
    
    
    <category term="Internet Explorer" scheme="https://jpdsi.github.io/blog/tags/Internet-Explorer/"/>
    
    <category term="Flash" scheme="https://jpdsi.github.io/blog/tags/Flash/"/>
    
  </entry>
  
  <entry>
    <title>異なるドメイン間で仮想ディレクトリを作成する場合の注意点</title>
    <link href="https://jpdsi.github.io/blog/web-apps/VirtualDirectory/"/>
    <id>https://jpdsi.github.io/blog/web-apps/VirtualDirectory/</id>
    <published>2021-04-18T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.037Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。IIS サポート チームです。</p><p>IIS 上で仮想ディレクトリを作成することがありますが、信頼関係がない異なるドメイン間で仮想ディレクトリを作成しようとした場合、仮想ディレクトリの作成に失敗します。具体的には仮想ディレクトリを作成する際に別ドメインの資格情報を記入するタイミングでエラーが発生します。</p><p> <img src="/blog/web-apps/VirtualDirectory/pic.png" alt="IIS仮想ディレクトリ図"></p><p>この現象の再現方法は以下の通りになります。</p><ol><li>ドメインAに参加しているマシン上にあるIISマネージャーを起動します。</li><li>サイト用の仮想ディレクトリを追加します。</li><li>「接続」方法として「特定ユーザー」を選択し、資格情報の設定を行います。</li><li>「資格情報の設定」画面に信頼関係を結んでいないドメイン Bのユーザー名とパスワードを入力します。</li><li>「資格情報の設定」画面のOKボタンを実行すると、「指定したパスワードは無効です。新しいパスワードを入力してください。」とエラーが表示されます。</li></ol><p>資格情報を記入した後、設定を完了するタイミングで行われる IIS の内部処理で、指定したユーザー情報を利用して認証を試みます。「資格情報の設定」画面に入力したドメイン名、ユーザー名、パスワードをもとに認証を試みますが、信頼関係のないドメインのユーザーの資格情報ではログインできないため、認証に失敗し、該当のエラーが記録されます。</p><p>この挙動は IIS の想定された動作になります。そのため、異なるドメイン間で仮想ディレクトリを作成いただく場合は、事前にドメイン間で信頼関係を築いていただく必要があります。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。IIS サポート チームです。&lt;/p&gt;
&lt;p&gt;IIS 上で仮想ディレクトリを作成することがありますが、信頼関係がない異なるドメイン間で仮想ディレクトリを作成しようとした場合、仮想ディレクトリの作成に失敗します。具体的には仮想ディレクトリを作成する際に別ドメインの</summary>
      
    
    
    
    
    <category term="Internet Information Services" scheme="https://jpdsi.github.io/blog/tags/Internet-Information-Services/"/>
    
    <category term="Virtual Directory" scheme="https://jpdsi.github.io/blog/tags/Virtual-Directory/"/>
    
  </entry>
  
  <entry>
    <title>新しい Microsoft Edge での file プロトコルの制限について</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/FileProtocol/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/FileProtocol/</id>
    <published>2021-03-31T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:50.985Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちわ！</p><p>今回は、新しい Microsoft Edge での file: プロトコルの制限についてお知らせします。<br>Chromium ベースの新しい Microsoft Edge では、セキュリティ上の制限により file: プロトコルのリンクは機能しません。<br>この制限は Chromium における制限となりますが、新しい Microsoft Edge 側でこの制限を解除可能なオプションを提供する予定は現状ありません。</p><blockquote><p>File system search result link does not open on Firefox or Chrome<br><a href="https://support.google.com/gsa/answer/2664790?hl=en">https://support.google.com/gsa/answer/2664790?hl=en</a></p></blockquote><p>新しい Microsoft Edge においても file プロトコルが使用できるようにするには、サードパーティー製の拡張機能ですが <a href="https://chrome.google.com/webstore/detail/enable-local-file-links/nikfmfgobenbhmocjaaboihbeocackld">Enable local file links</a> などのご利用や、<a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode">IE モード</a> のご利用をご検討ください。</p><p>以下に動作の具体例をあげます。</p><hr><p>A : アドレスバーに file:// の URL を直接入力して開く場合<br>外部からのアクセスではなく、ファイルを直接開く動作となります。<br>そのため、ファイルを開くことが可能です。</p><p>B : ローカル マシンに保存している HTML ファイルを Microsoft Edge (Chromium) で開いている場合<br>外部ではなくローカル ファイルからのアクセスのため、file:// のリンク先を開くことが可能です。</p><p>C : <a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode">IE モード</a> を利用した場合<br>端末にインストールされている Internet Explorer を利用してサイトを開きます。<br>Internet Explorer の単体利用時と同様に file:// のリンク先を開くことが可能です。</p><hr><p>※ IE モードについて、以下の記事もご参照いただければと思いますが、ご利用に関してお困りなことがありましたら私たちサポートまでお問い合わせください！</p><p>新しいバージョンの Microsoft Edge の “IE モード” について<br><a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/IEMode/">https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/IEMode/</a></p><p>短いですが、今回は以上です。<br>それでは、また次回！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちわ！&lt;/p&gt;
&lt;p&gt;今回は、新しい Microsoft Edge での file: プロトコルの制限についてお知らせします。&lt;br&gt;Chromium ベースの新しい Microsoft Edge では、セキュリティ上の制限により file: プロトコルのリンクは機能</summary>
      
    
    
    
    
    <category term="Microsoft Edge" scheme="https://jpdsi.github.io/blog/tags/Microsoft-Edge/"/>
    
    <category term="Chromium" scheme="https://jpdsi.github.io/blog/tags/Chromium/"/>
    
  </entry>
  
  <entry>
    <title>IE で開いていたページが Microsoft Edge にリダイレクトされる動作について</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/IEtoEdgeRedirection/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/IEtoEdgeRedirection/</id>
    <published>2021-02-17T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.005Z</updated>
    
    <content type="html"><![CDATA[<p>みなさんこんにちは。<br>日本マイクロソフトの IE/Edge サポートチームです。  </p><p>近頃、「いつのまにか IE で表示されなくなり、新しい Microsoft Edge でサイトが表示されるようになった」とお問い合わせを頂くことがあります。<br>IE での表示を前提として Web アプリを作成されている方では、IE で開くようにしたいという方もいらっしゃるかと思います。  </p><p> <br>そこで、少しでも本事象でお困りな皆様のお力になれればと、本ブログにて情報をまとめました！<br>本記事は以下のような構成となってます。</p><ul><li><a href="#1--%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E5%8B%95%E4%BD%9C">1 : どのような動作？</a><ul><li><a href="#%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AA%E5%86%85%E5%AE%B9">具体的な内容</a></li></ul></li><li><a href="#2--%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE-web-%E3%82%B5%E3%82%A4%E3%83%88%E3%81%8C-edge-%E3%81%A7%E9%96%8B%E3%81%8B%E3%82%8C%E3%82%8B">2 : すべての Web サイトが Edge で開かれる？</a></li><li><a href="#3--%E5%AF%BE%E5%87%A6%E6%B3%95%E3%81%AF%E3%81%82%E3%82%8B%E3%81%AE%E3%81%8B">3 :  対処法はあるのか？</a><ul><li><a href="#%E4%BA%88%E9%98%B2%E7%AD%96">予防策</a></li><li><a href="#%E5%AF%BE%E5%87%A6%E7%AD%96">対処策</a></li></ul></li></ul><p> </p><h1 id="1-どのような動作？"><a href="#1-どのような動作？" class="headerlink" title="1 : どのような動作？"></a>1 : どのような動作？</h1><p>近年のモダンブラウザ移行に伴い、最新の web サイトの多くは、Internet Explorer と互換性のないデザインが多く使用されています。<br>今回の IE で利用していたサイトを新しい Microsoft Edge (以降、単に Edge と表記します)へリダイレクトさせる機能は、  最新のブラウザでユーザーにスムーズにブラウジングをして頂くための機能となります。  </p><p><a href="https://docs.microsoft.com/ja-jp/microsoft-edge/web-platform/ie-to-microsoft-edge-redirection#request-an-update-to-the-ie-compatibility-list">Internet Explorer から Microsoft Edge にユーザーを移動する - Microsoft Edge Development | Microsoft Docs</a>  </p><p>なお、私どもブラウザ チームは Edge へのお早めの移行をお奨めしております。  </p><p><a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/how-about-using-new-edge/">まだデフォルトIE？ 新しい Microsoft Edge を使いませんか？ | Japan Developer Support Internet Team Blog (jpdsi.github.io)</a></p><h2 id="具体的な内容"><a href="#具体的な内容" class="headerlink" title="具体的な内容"></a>具体的な内容</h2><p>本機能はEdgeの既定のブラウザにおける 「Internet Explorer に Microsoft Edge でサイトを開かせる」の設定項目に依存します。<br>具体的な設定は Edge を開き、アドレスバーに edge://settings/defaultBrowser  と入力することで確認できます。  </p><p><img src="/blog/internet-explorer-microsoft-edge/IEtoEdgeRedirection/EdgeSettingToEnableOpenWebSiteByIE.png" alt="Picture"></p><p>上記のように「Internet Explorer に Microsoft Edge でサイトを開かせる」の設定で「互換性のないサイトのみ(推奨)」を選択した状態で、<br>互換性のないサイト (例： youtube.com) を IE で開こうとすると、IE上には以下のように表示され、Edgeで YouTube のサイトページが表示されます。</p><p><img src="/blog/internet-explorer-microsoft-edge/IEtoEdgeRedirection/WebSiteYouAccessedCannotBeOpenedByIE.jpg" alt="Picture"></p><p>互換性のないサイトは以下にリスト化されており、本設定の際にはこちらに当てはまるものは Edge で開かれます。</p><p><a href="https://edge.microsoft.com/neededge/v1">https://edge.microsoft.com/neededge/v1</a></p><p>そのため、もし開こうとしていたサイトがこちらのリストに存在する場合は、<br>「互換性のないサイトのみ(推奨)」の設定をしていた場合には IE ではなく、Edge で開かれます。 </p><h1 id="2-すべての-Web-サイトが-Edge-で開かれる？"><a href="#2-すべての-Web-サイトが-Edge-で開かれる？" class="headerlink" title="2 : すべての Web サイトが Edge で開かれる？"></a>2 : すべての Web サイトが Edge で開かれる？</h1><p>また、上記互換性のないサイトのリストにない Web サイトを含め、全ての Web サイトが IE ではなく、Edge で開かれるパターンもあります。</p><p>IE でブラウジングをしていると、以下のようなオプトインが表示されることがありますが、<br>「Microsoft Edge に切り替える」 を選択することで、今後 全ての Web サイトがEdge で開かれるようになります。</p><p><img src="/blog/internet-explorer-microsoft-edge/IEtoEdgeRedirection/OptInToInformSomeWebSiteCannotBeOpenedByIE.jpg" alt="Picture"></p><h1 id="3-対処法はあるのか？"><a href="#3-対処法はあるのか？" class="headerlink" title="3 :  対処法はあるのか？"></a>3 :  対処法はあるのか？</h1><h2 id="予防策"><a href="#予防策" class="headerlink" title="予防策"></a>予防策</h2><p>2 の予防措置としては、上記オプトインが表示された場合は、「今は実行しない」を押して切り替えないようにすることが考えられます。</p><p><img src="/blog/internet-explorer-microsoft-edge/IEtoEdgeRedirection/EdgeSettingToDisableOpenWebSiteByIE.jpg" alt="Picture"> </p><h2 id="対処策"><a href="#対処策" class="headerlink" title="対処策"></a>対処策</h2><p>一度設定を変更された場合においても、「Internet Explorer に Microsoft Edge でサイトを開かせる」において「なし」を選択していただくことによって解決可能です。 </p><p>上記方法で、IE のままサイトを閲覧するように変更することも可能ですが、Web サイトの技術も日進月歩進化しており、新しい Microsoft Edge へお早めの移行をご検討ください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;みなさんこんにちは。&lt;br&gt;日本マイクロソフトの IE/Edge サポートチームです。  &lt;/p&gt;
&lt;p&gt;近頃、「いつのまにか IE で表示されなくなり、新しい Microsoft Edge でサイトが表示されるようになった」とお問い合わせを頂くことがあります。&lt;br&gt;IE</summary>
      
    
    
    
    
    <category term="Microsoft Edge" scheme="https://jpdsi.github.io/blog/tags/Microsoft-Edge/"/>
    
    <category term="Internet Explorer" scheme="https://jpdsi.github.io/blog/tags/Internet-Explorer/"/>
    
  </entry>
  
  <entry>
    <title>.NET Framework で TLS 1.1 および TLS 1.2 を有効化する方法 - まとめ -</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/</id>
    <published>2020-11-24T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.013Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本記事は Technet Blog の更新停止に伴い、もともとばらばらに存在していた記事を一つのブログに集約／移行したものです。<br>元の記事の最新の更新情報については、本内容をご参照ください。</p></blockquote><p>(※ 2018 年 10 月 11 日に Japan IE Support Team Blog に公開した情報をアーカイブする目的で、Microsoft 社員にて改めて公開しております。)</p><p>みなさん、こんにちは。</p><p>.NET Framework での TLS 1.1 および 1.2 対応について、以前 .NET Framework で TLS1.1 および 1.2 を有効化する方法 という記事を投稿しています。<br>しかしながら、記載の内容がわかりづらいこと、また、記事の公開以降に Update できていなかった点があるため、まとめとして本記事を作成しました。<br>今後のご対応の一助となれましたら大変うれしく思います。  </p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><hr><p>本資料は下記の構成でまとめています。</p><ol><li>TLS 1.1 および 1.2 に対応するうえでの考え方  </li><li>Windows OS の TLS 1.1 および 1.2 への対応状況  </li><li>.NET Framework で利用される既定のプロトコル バージョン  </li><li>.NET Framework 3.5 で TLS 1.1 および 1.2 を利用できるようにするための更新プログラム  </li><li>.NET Framework 3.5 で TLS 1.1 および 1.2 を既定値にするための方法  </li><li>.NET Framework 4.5.2 で TLS 1.1 および 1.2 を既定値にするための方法  </li><li>.NET Framework のサポート状況  </li><li>各 OS ごとの対応方法  </li></ol><p>また、本資料と併せて下記の資料もご参考ください。</p><blockquote><p><a href="https://docs.microsoft.com/en-us/dotnet/framework/network-programming/tls">Transport Layer Security (TLS) best practices with the .NET Framework</a><br>(日本語訳) <a href="https://docs.microsoft.com/ja-jp/dotnet/framework/network-programming/tls">.NET Framework でのトランスポート層セキュリティ (TLS) のベスト プラクティス</a> </p></blockquote><h2 id="1-TLS-1-1-および-1-2-に対応するうえでの考え方"><a href="#1-TLS-1-1-および-1-2-に対応するうえでの考え方" class="headerlink" title="1. TLS 1.1 および 1.2 に対応するうえでの考え方"></a>1. TLS 1.1 および 1.2 に対応するうえでの考え方</h2><hr><p>.NET Framework で作成されたアプリケーションを TLS 1.2 (TLS 1.1) に対応させるには下記の点を考慮する必要があります。<br>ご利用の OS が TLS 1.1 および 1.2 を利用できるかどうか、また、アプリケーションで独自に設定しているかどうか、により必要な対応が異なります。<br>このため、まずは下記の観点で、ご利用対象の環境やアプリケーションについて理解することが第一歩となります。  </p><ul><li><span style="color: darkblue;">対象の環境は OS として TLS 1.2 (TLS 1.1) を利用できるかどうか</span>  </li><li><span style="color: darkblue;">アプリケーション側で ServicePointManager.SecurityProtocol プロパティにすでに明示的に設定しているものがないか</span>  </li><li><span style="color: darkblue;">アプリケーションがターゲットしている .NET Framework のバージョンはいくつか</span>  </li><li><span style="color: darkblue;">稼働対象の環境にインストールされている .NET Framework のバージョンはいくつか</span>  </li><li><span style="color: darkblue;">アプリケーションを改修することはできるか</span>  </li></ul><p>各ポイントの詳細については次項以降をご覧ください。  </p><h2 id="2-Windows-OS-の-TLS-1-1-および-1-2-への対応状況"><a href="#2-Windows-OS-の-TLS-1-1-および-1-2-への対応状況" class="headerlink" title="2. Windows OS の TLS 1.1 および 1.2 への対応状況"></a>2. Windows OS の TLS 1.1 および 1.2 への対応状況</h2><hr><p>ご利用対象の Windows OS 自体が TLS 1.1 および 1.2 を利用することができない場合には、.NET Framework 側でいくら対応しても TLS 1.1 および 1.2 に対応することはできません。<br>.NET Framework での対応の前に、<span style="color: red;"><strong>Windows OS 自体を TLS 1.1 および 1.2 を利用できるように構成する必要があります</strong></span>。</p><p><strong>！ご注意ください！</strong><br>Windows OS 自体が TLS 1.1 および 1.2 を利用することができない状態でアプリケーション側で TLS 1.1 および 1.2 が指定されると、アプリケーション実行時に例外が発生します。  </p><h3 id="Windows-Server-2008-SP2"><a href="#Windows-Server-2008-SP2" class="headerlink" title="Windows Server 2008 SP2"></a>Windows Server 2008 SP2</h3><p>既定の状態では OS として TLS 1.1 および 1.2 を<span style="color: red;"><strong>利用することができません</strong></span>。<br>.NET Framework での TLS 1.1 および 1.2 への対応の前に、事前に下記の更新プログラムを適用し、OS として TLS 1.1 および 1.2 を利用できるようにする必要があります。  </p><blockquote><p><a href="https://support.microsoft.com/ja-jp/help/4019276/update-to-add-support-for-tls-1-1-and-tls-1-2-in-windows">Windows Server 2008 SP2、Windows Embedded POSReady 2009、および Windows Embedded Standard 2009 に TLS 1.1 および TLS 1.2 のサポートを追加する更新プログラム</a>  </p></blockquote><p>更新プログラム適用後、必要に応じて上記資料に記載のレジストリ値を設定します。  </p><pre><code>[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Client]  &quot;DisabledByDefault&quot;=dword:00000001  [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client]  &quot;DisabledByDefault&quot;=dword:00000001  [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server]  &quot;DisabledByDefault&quot;=dword:00000001  [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server]  &quot;DisabledByDefault&quot;=dword:00000001  </code></pre><p><strong>設定のポイント</strong><br>クライアント OS として利用する場合 (任意のアプリケーションが別の Web サーバーに接続するような場合) には Client に設定します。<br>サーバー OS として利用する場合 (Web サーバーのように接続を待ち受けるような場合) には Server に設定します。  </p><h3 id="Windows-Server-2008-R2-Windows-7"><a href="#Windows-Server-2008-R2-Windows-7" class="headerlink" title="Windows Server 2008 R2 / Windows 7"></a>Windows Server 2008 R2 / Windows 7</h3><p>OS としては TLS 1.1 および 1.2 を利用できますが、アプリケーション側より明示的に TLS 1.1 もしくは 1.2 を利用する指定がない限り利用されません。<br>アプリケーション側からの指定がなくとも利用されるように構成するには、上記の Windows Server 2008 SP2 に記載したレジストリ値 (DisabledByDefault) を必要に応じて設定します。<br>(参考) <a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn786418(v=ws.11)">TLS/SSL Settings</a>  </p><h3 id="Windows-Server-2012-Windows-8-1-以降"><a href="#Windows-Server-2012-Windows-8-1-以降" class="headerlink" title="Windows Server 2012 / Windows 8.1 以降"></a>Windows Server 2012 / Windows 8.1 以降</h3><p>OS として TLS 1.1 および 1.2 を利用でき、かつ、既定の状態で TLS 1.1 および 1.2 が利用されるように構成されています。<br>追加で必要な設定はありません。  </p><h2 id="3-NET-Framework-で利用される既定のプロトコル-バージョン"><a href="#3-NET-Framework-で利用される既定のプロトコル-バージョン" class="headerlink" title="3. .NET Framework で利用される既定のプロトコル バージョン"></a>3. .NET Framework で利用される既定のプロトコル バージョン</h2><hr><p>.NET Framework では、HttpWebRequest クラスなどを利用した通信において ServicePointManager.SecurityProtocol プロパティに指定されたプロトコル バージョンが利用されます。<br>プログラム上で明示的に指定されている場合は指定されたプロトコル バージョンが利用されますが、指定されていない場合に利用される既定のプロトコル バージョンは下記のとおりです。<br>.NET Framework の各バージョンごとに、TLS 1.1 および 1.2 への対応状況と併せてまとめました。  </p><h3 id="NET-Framework-3-5-3-5-1"><a href="#NET-Framework-3-5-3-5-1" class="headerlink" title=".NET Framework 3.5 (3.5.1)"></a>.NET Framework 3.5 (3.5.1)</h3><p>既定では TLS 1.1 および 1.2 は未対応<br>プロパティの既定値は SSL 3.0 および TLS 1.0  </p><h3 id="NET-Framework-4-5-2"><a href="#NET-Framework-4-5-2" class="headerlink" title=".NET Framework 4.5.2"></a>.NET Framework 4.5.2</h3><p>TLS 1.1 / TLS 1.2 に対応済み<br>プロパティの既定値は SSL 3.0 および TLS 1.0  </p><h3 id="NET-Framework-4-6-x"><a href="#NET-Framework-4-6-x" class="headerlink" title=".NET Framework 4.6.x"></a>.NET Framework 4.6.x</h3><p>TLS 1.1 / TLS 1.2 に対応済み<br>プロパティの既定値は TLS 1.0、1.1 および 1.2  </p><h3 id="NET-Framework-4-7-x"><a href="#NET-Framework-4-7-x" class="headerlink" title=".NET Framework 4.7.x"></a>.NET Framework 4.7.x</h3><p>TLS 1.1 / TLS 1.2 に対応済み<br>プロパティの既定値は SystemDefault となり、OS の TLS の設定状態に依存する  </p><h3 id="NET-Framework-4-8-x"><a href="#NET-Framework-4-8-x" class="headerlink" title=".NET Framework 4.8.x"></a>.NET Framework 4.8.x</h3><p>TLS 1.1 / TLS 1.2 に対応済み<br>プロパティの既定値は SystemDefault となり、OS の TLS の設定状態に依存する  </p><h2 id="4-NET-Framework-3-5-で-TLS-1-1-および-1-2-を利用できるようにするための更新プログラム"><a href="#4-NET-Framework-3-5-で-TLS-1-1-および-1-2-を利用できるようにするための更新プログラム" class="headerlink" title="4. .NET Framework 3.5 で TLS 1.1 および 1.2 を利用できるようにするための更新プログラム"></a>4. .NET Framework 3.5 で TLS 1.1 および 1.2 を利用できるようにするための更新プログラム</h2><hr><p>.NET Framework 3.5 は既定の状態では TLS 1.1 および 1.2 を利用することができません。<br>.NET Framework 3.5 で TLS 1.1 および 1.2 を利用できるようにするために下記の更新プログラムを適用する必要があります。<br>※ 下記更新プログラムはそれ以降の更新プログラムで置き換えられていますので、セキュリティの観点では『Windows 10 および Windows Server 2016 の場合は OS 向けの最新のロールアップ』を、『それ以外の OS では .NET Framework 向けの最新の品質ロールアップ』を適用することをおすすめします。</p><p><strong>！ご注意ください！</strong><br>更新プログラムを適用しない状態でアプリケーション側で TLS 1.1 および 1.2 が指定されると、アプリケーション実行時に例外が発生します。  </p><h3 id="Windows-Server-2008"><a href="#Windows-Server-2008" class="headerlink" title="Windows Server 2008"></a>Windows Server 2008</h3><p><a href="https://support.microsoft.com/en-us/help/3154517/support-for-tls-system-default-versions-included-in-the-net-framework">Support for TLS System Default Versions included in the .NET Framework 2.0 SP2 on Windows Vista SP2 and Server 2008 SP2</a>  </p><h3 id="Windows-Server-2008-R2-Windows-7-1"><a href="#Windows-Server-2008-R2-Windows-7-1" class="headerlink" title="Windows Server 2008 R2 / Windows 7"></a>Windows Server 2008 R2 / Windows 7</h3><p><a href="https://support.microsoft.com/en-us/help/3154518/support-for-tls-system-default-versions-included-in-the-net-framework">Support for TLS System Default Versions included in the .NET Framework 3.5.1 on Windows 7 SP1 and Server 2008 R2 SP1</a>  </p><h3 id="Windows-Server-2012"><a href="#Windows-Server-2012" class="headerlink" title="Windows Server 2012"></a>Windows Server 2012</h3><p><a href="https://support.microsoft.com/en-us/help/3154519/support-for-tls-system-default-versions-included-in-the-net-framework">Support for TLS System Default Versions included in the .NET Framework 3.5 on Windows Server 2012</a>  </p><h3 id="Windows-Server-2012-R2-Windows-8-1"><a href="#Windows-Server-2012-R2-Windows-8-1" class="headerlink" title="Windows Server 2012 R2 / Windows 8.1"></a>Windows Server 2012 R2 / Windows 8.1</h3><p><a href="https://support.microsoft.com/en-us/help/3154520/support-for-tls-system-default-versions-included-in-the-net-framework">Support for TLS System Default Versions included in the .NET Framework 3.5 on Windows 8.1 and Windows Server 2012 R2</a><br>※ 更新プログラムの適用には Windows 8.1 Update / Windows Server 2012 R2 Update (KB2919355) が事前に適用されている必要があります  </p><h3 id="Windows-10-v1507-LTSC"><a href="#Windows-10-v1507-LTSC" class="headerlink" title="Windows 10 v1507 (LTSC)"></a>Windows 10 v1507 (LTSC)</h3><p>Windows 10 v1507 環境向けに公開されている更新プログラムを適用します。<br>※ 本記事執筆時点で、最も古い更新プログラムは下記の 2016 年 10 月に公開された更新プログラムです。下記以降の更新プログラムの適用をご検討ください。<br><a href="https://support.microsoft.com/ja-jp/help/4001772/windows-10-update-kb3192440">2016 年 10 月 11 日 — KB3192440 (OS ビルド 10240.17146)</a>  </p><h3 id="Windows-10-v1607-LTSC-Windows-Server-2016"><a href="#Windows-10-v1607-LTSC-Windows-Server-2016" class="headerlink" title="Windows 10 v1607 (LTSC) / Windows Server 2016"></a>Windows 10 v1607 (LTSC) / Windows Server 2016</h3><p>下記のいずれかの更新プログラム以降で対応されています。<br><a href="https://support.microsoft.com/ja-jp/help/4004253/windows-10-update-kb3201845">2016 年 12 月 9 日 — KB3201845 (OS ビルド 14393.479)</a><br><a href="https://support.microsoft.com/ja-jp/help/4004227/windows-10-update-kb3206632">2016 年 12 月 13 日 — KB3206632 (OS ビルド 14393.576)</a></p><h3 id="Windows-10-v1703-Windows-Server-2019-以降"><a href="#Windows-10-v1703-Windows-Server-2019-以降" class="headerlink" title="Windows 10 v1703 / Windows Server 2019 以降"></a>Windows 10 v1703 / Windows Server 2019 以降</h3><p>.NET Framework 3.5 の機能を有効化した時点ですでに対応されています。<br>追加で適用が必要な更新プログラムはありません。  </p><h2 id="5-NET-Framework-3-5-で-TLS-1-1-および-1-2-を既定値にするための方法"><a href="#5-NET-Framework-3-5-で-TLS-1-1-および-1-2-を既定値にするための方法" class="headerlink" title="5. .NET Framework 3.5 で TLS 1.1 および 1.2 を既定値にするための方法"></a>5. .NET Framework 3.5 で TLS 1.1 および 1.2 を既定値にするための方法</h2><hr><p>.NET Framework 3.5 は、SSL 3.0 および TLS 1.0 が既定で利用されるプロトコル バージョンです。<br>既定値を変更するには、Windows OS 側で TLS 1.1 および 1.2 が利用されるよう構成し、かつ、.NET Framework 3.5 で TLS 1.1 および 1.2 を利用できるようにするための更新プログラムを適用したうえで各資料に記載の下記のレジストリ値を設定します。  </p><p>下記のレジストリ値が設定されると Windows OS 側で構成しているプロトコル バージョンに従うようになります。<br>Windows OS 側で TLS 1.1 および 1.2 が利用されるよう構成することで、.NET Framework 3.5 で利用されるプロトコル バージョンも TLS 1.0、TLS 1.1 および TLS 1.2 に変更されます。  </p><pre><code>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v2.0.50727]  &quot;SystemDefaultTlsVersions&quot;=dword:00000001  </code></pre><p>64 ビット OS の環境の場合は下記にも設定します。</p><pre><code>[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\v2.0.50727]  &quot;SystemDefaultTlsVersions&quot;=dword:00000001  </code></pre><p><strong>設定のポイント</strong><br>プログラム上で ServicePointManager.SecurityProtocol プロパティに明示的に任意のプロトコル バージョンを指定している場合は、上記のレジストリ値の設定の有無にかかわらずプログラムで指定したプロトコル バージョンが利用されます。  </p><h2 id="6-NET-Framework-4-5-2-で-TLS-1-1-および-1-2-を既定値にするための方法"><a href="#6-NET-Framework-4-5-2-で-TLS-1-1-および-1-2-を既定値にするための方法" class="headerlink" title="6. .NET Framework 4.5.2 で TLS 1.1 および 1.2 を既定値にするための方法"></a>6. .NET Framework 4.5.2 で TLS 1.1 および 1.2 を既定値にするための方法</h2><hr><p>.NET Framework 4.5.2 は、SSL 3.0 および TLS 1.0 が既定で利用されるプロトコル バージョンです。<br>既定値を変更するには、下記のセキュリティ アドバイザリー 2960358 で公開されている更新プログラムを適用します。<br>※ 下記更新プログラムはそれ以降の更新プログラムで置き換えられていますので、セキュリティの観点では『Windows 10 および Windows Server 2016 の場合は OS 向けの最新のロールアップ』を、『それ以外の OS では .NET Framework 向けの最新の品質ロールアップ』を適用することをおすすめします。  </p><blockquote><p><a href="https://docs.microsoft.com/en-us/security-updates/securityadvisories/2015/2960358">Microsoft Security Advisory 2960358</a><br>(日本語訳) <a href="https://docs.microsoft.com/ja-jp/security-updates/securityadvisories/2015/2960358">マイクロソフト セキュリティ アドバイザリ 2960358</a>  </p></blockquote><p>上記のセキュリティ アドバイザリーを適用すると下記のレジストリ値が構成され、.NET Framework 4.5.2 で利用されるプロトコル バージョンが TLS 1.0、TLS 1.1 および TLS 1.2 に変更されます。<br>念のためレジストリ値が構成されているか確認し、万が一構成されていない場合は手動で構成します。  </p><pre><code>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319]  &quot;SchUseStrongCrypto&quot;=dword:00000001  </code></pre><p>64 ビット OS 環境の場合は下記にも設定します。</p><pre><code>[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\v4.0.30319]  &quot;SchUseStrongCrypto&quot;=dword:00000001  </code></pre><p><strong>設定のポイント</strong><br><span style="color: red;">プログラム上で ServicePointManager.SecurityProtocol プロパティに明示的に任意のプロトコル バージョンを指定している場合は、上記のレジストリ値の設定の有無にかかわらずプログラムで指定したプロトコル バージョンが利用されます。</span>  </p><h2 id="7-NET-Framework-のサポート状況"><a href="#7-NET-Framework-のサポート状況" class="headerlink" title="7. .NET Framework のサポート状況"></a>7. .NET Framework のサポート状況</h2><p><span style="color: red;">.NET Framework 4.x 系は、4.5.2 以降がサポート対象です。</span><br>稼働対象の環境にインストールするバージョンは可能な限り最新のバージョンとすることをご検討ください。  </p><blockquote><p><a href="https://blogs.msdn.microsoft.com/visualstudio_jpn/2015/10/18/net-framework-201510/">.NET Framework サポート ライフサイクル ポリシーについて (2015 年 10 月)</a><br><a href="https://blogs.msdn.microsoft.com/jpvsblog/2015/07/22/net-framework-4-12388/">.NET Framework 4 を対象に作成したアプリケーションのサポートについて</a>  </p></blockquote><h3 id="各-OS-上での-NET-Framework-の既定のバージョン"><a href="#各-OS-上での-NET-Framework-の既定のバージョン" class="headerlink" title="各 OS 上での .NET Framework の既定のバージョン"></a>各 OS 上での .NET Framework の既定のバージョン</h3><p>OS ごとに既定でインストールされている .NET Framework のバージョンは下記の資料をご覧ください。<br>OS によってはクリーンインストールした状態ですでにサポートが終了している状況もあり得るため、インストールすることのできる最新バージョンへの更新をご検討ください。  </p><blockquote><p><a href="https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies">.NET Framework Versions and Dependencies</a><br>(日本語訳) <a href="https://docs.microsoft.com/ja-jp/dotnet/framework/migration-guide/versions-and-dependencies">.NET Framework のバージョンおよび依存関係</a>  </p></blockquote><blockquote><p><a href="https://docs.microsoft.com/en-us/dotnet/framework/install/">Installation guide</a><br>(日本語訳) <a href="https://docs.microsoft.com/ja-jp/dotnet/framework/install/">インストール ガイド</a>  </p></blockquote><h3 id="各-OS-上でサポートされるバージョン"><a href="#各-OS-上でサポートされるバージョン" class="headerlink" title="各 OS 上でサポートされるバージョン"></a>各 OS 上でサポートされるバージョン</h3><p>各 OS ごとにサポートされているバージョンは下表のとおりです。<br><img src="/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/dotnet-framework-versions-dependencies.png" alt="各 OS 上でサポートされるバージョン">  </p><h2 id="8-各-OS-ごとの対応方法"><a href="#8-各-OS-ごとの対応方法" class="headerlink" title="8. 各 OS ごとの対応方法"></a>8. 各 OS ごとの対応方法</h2><hr><p>上記までの内容を踏まえたうえでの各 OS ごとの対応方法について下記にまとめました。<br>なお、.NET Framework 3.5(.1) は、事前に <span style="color: red;"><strong>TLS 1.1 および TLS 1.2 に対応するための更新プログラムが適用されていることが前提</strong></span> です。<br>また、Windows Server 2008 は、事前に <span style="color: red;"><strong>OS 向けの TLS 1.1 および 1.2 に対応するための更新プログラムが適用されていることが前提</strong></span> です。  </p><h3 id="各-OS-共通"><a href="#各-OS-共通" class="headerlink" title="各 OS 共通"></a>各 OS 共通</h3><p>何度も記載していますが、ServicePointManager.SecurityProtocol プロパティに明示的にプロトコル バージョンを指定している場合には、当プロパティに指定したプロトコル バージョンが利用されます。<br>下表は当プロパティに TLS 1.2 を設定した場合の対応表になります。<br><img src="/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/os_common.png" alt="各 OS 共通">  </p><p>ServicePointManager.SecurityProtocol プロパティに明示的に指定していない場合の各 OS ごとの対応表は下記のとおりです。  </p><h3 id="Windows-Server-2008-1"><a href="#Windows-Server-2008-1" class="headerlink" title="Windows Server 2008"></a>Windows Server 2008</h3><p><strong>※ 前提条件 ※</strong><br>Windows Server 2008 は、既定の状態では OS として TLS 1.1 および 1.2 を利用することができません。<br>事前に <span style="color: red;"><strong>TLS 1.1 および 1.2 を利用できるようにするための更新プログラムの適用が必須</strong></span> です。<br><img src="/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/windows-server-2008.png" alt="Windows Server 2008">  </p><h3 id="Windows-Server-2008-R2-Windows-7-2"><a href="#Windows-Server-2008-R2-Windows-7-2" class="headerlink" title="Windows Server 2008 R2 / Windows 7"></a>Windows Server 2008 R2 / Windows 7</h3><p><strong>※ 前提条件 ※</strong><br>Windows Server 2008 R2 / Windows 7 は OS としては TLS 1.1 および 1.2 を利用できますが、アプリケーション側より明示的に TLS 1.1 もしくは 1.2 を利用する指定がない限り利用されません。<br>必要に応じて <span style="color: red;"><strong>アプリケーション側からの指定がなくとも TLS 1.1 および 1.2 が利用されるためのレジストリ値を設定します</strong></span>。<br><img src="/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/windows-7-windows-server-2008r2.png" alt="Windows 7 および Windows Server 2008 R2">  </p><h3 id="Windows-Server-2012-1"><a href="#Windows-Server-2012-1" class="headerlink" title="Windows Server 2012"></a>Windows Server 2012</h3><p><img src="/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/windows-server-2012.png" alt="Windows Server 2012">  </p><h3 id="Windows-Server-2012-R2-Windows-8-1-1"><a href="#Windows-Server-2012-R2-Windows-8-1-1" class="headerlink" title="Windows Server 2012 R2 / Windows 8.1"></a>Windows Server 2012 R2 / Windows 8.1</h3><p><img src="/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/windows-81-windows-server-2012r2.png" alt="Windows 8.1 および Windows Server 2012 R2">  </p><h3 id="Windows-10-v1507-LTSC-2015"><a href="#Windows-10-v1507-LTSC-2015" class="headerlink" title="Windows 10 v1507 (LTSC 2015)"></a>Windows 10 v1507 (LTSC 2015)</h3><p><img src="/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/windows-10-1507.png" alt="Windows 10 v1507 (LTSC 2015)">  </p><h3 id="Windows-10-v1607-LTSC-2016-Windows-Server-2016"><a href="#Windows-10-v1607-LTSC-2016-Windows-Server-2016" class="headerlink" title="Windows 10 v1607 (LTSC 2016) / Windows Server 2016"></a>Windows 10 v1607 (LTSC 2016) / Windows Server 2016</h3><p><img src="/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/windows-10-1607-windows-server-2016.png" alt="Windows 10 v1607 (LTSC 2016) および Windows Server 2016">  </p><h3 id="Windows-10-v1803"><a href="#Windows-10-v1803" class="headerlink" title="Windows 10 v1803"></a>Windows 10 v1803</h3><p><img src="/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/windows-10-1803.png" alt="Windows 10 v1803">  </p><h3 id="Windows-10-v1809-LTSC-2019-Windows-Server-2019"><a href="#Windows-10-v1809-LTSC-2019-Windows-Server-2019" class="headerlink" title="Windows 10 v1809 (LTSC 2019) / Windows Server 2019"></a>Windows 10 v1809 (LTSC 2019) / Windows Server 2019</h3><p><img src="/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/windows-10-1809-windows-server-2019.png" alt="Windows 10 v1809 (LTSC 2019) および Windows Server 2019">  </p><h3 id="Windows-10-v1903-v1909-v2004-v20H2"><a href="#Windows-10-v1903-v1909-v2004-v20H2" class="headerlink" title="Windows 10 v1903 / v1909 / v2004 / v20H2"></a>Windows 10 v1903 / v1909 / v2004 / v20H2</h3><p><img src="/blog/internet-explorer-microsoft-edge/dotnet-framework-tls12/windows-10-1903-to-20H2.png" alt="Windows 10 v1903 / v1909 / v2004 / v20H2">  </p><p>いかがでしょうか。<br>本記事が今後のご対応のお役に立てますと幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本記事は Technet Blog の更新停止に伴い、もともとばらばらに存在していた記事を一つのブログに集約／移行したものです。&lt;br&gt;元の記事の最新の更新情報については、本内容をご参照ください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(※ 2</summary>
      
    
    
    
    
    <category term=".NET Framewrork" scheme="https://jpdsi.github.io/blog/tags/NET-Framewrork/"/>
    
    <category term="TLS" scheme="https://jpdsi.github.io/blog/tags/TLS/"/>
    
  </entry>
  
  <entry>
    <title>gRPC で動く CLI チャットアプリを ASP.NET Core で実装してみよう！</title>
    <link href="https://jpdsi.github.io/blog/web-apps/GrpcChatOnAspNetCore/"/>
    <id>https://jpdsi.github.io/blog/web-apps/GrpcChatOnAspNetCore/</id>
    <published>2020-09-14T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.029Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。<br>Developer Support Internet チーム にてインターンをしている尾崎耀一と申します！</p><p>今回は ASP.NET Core を用いて、 gRPC で動く CLI （コマンドライン）でチャットができるアプリを作る方法を紹介します。<br>本記事を通じて、 ASP.NET Core を用いた gRPC サービスの開発が簡単にできることがわかると思います。<br>皆様の開発の一助になると幸いです。</p><p>まずはチャット アプリを作る前に ASP.NET Core についてご紹介します。</p><hr><h2 id="ASP-NET-Core-について"><a href="#ASP-NET-Core-について" class="headerlink" title="ASP.NET Core について"></a>ASP.NET Core について</h2><p>ASP.NET Core はクロスプラットフォームで動作するウェブアプリケーションフレームワークです。</p><p>ASP.NET Core を用いることで簡単にウェブアプリを開発することができます。加えて、 ASP.NET Core はクロスプラットフォームに対応しているので、 Windows/macOS/Linux 上で開発・実行することができます。</p><p>ASP.NET Core はオープンソースで開発が進められており、 ASP.NET Core コミュニティーは大きく成長しています。</p><p>ASP.NET Core はモダンなウェブ開発をフレームワークとしてサポートしています。テストが容易に実行できるようなアーキテクチャを採用しており、クラウドへのデプロイなども想定し Visual Studio などのエディタも用意されています。</p><p>また、最新の技術にも対応しています。 例えば、gRPC によるリモート プロシージャ コールのサポートや <a href="https://webassembly.org/">WebAssemby</a> によって SAP（Single Page Application）を C# で開発する <a href="https://docs.microsoft.com/ja-jp/aspnet/core/blazor/?view=aspnetcore-3.1">Blazor</a> というフレームワークもサポートしています。</p><p>公式ドキュメントにもあるように、ASP.NET Core には次のような利点があります。</p><blockquote><ul><li>Web UI と Web API を構築するプロセスの統一。</li><li>テストの容易性を考慮したアーキテクチャ。</li><li><a href="https://docs.microsoft.com/ja-jp/aspnet/core/razor-pages/?view=aspnetcore-3.1">Razor Pages</a> により、ページ コーディングに重点を置いたシナリオがより簡略化され、その生産性が高められます。</li><li><a href="https://docs.microsoft.com/ja-jp/aspnet/core/blazor/?view=aspnetcore-3.1">Blazor</a> により、ブラウザー内で JavaScript と共に C# を使用できます。 すべて .NET で記述された、サーバー側とクライアント側アプリのロジックを共有します。</li><li>Windows、macOS、Linux 上で開発および実行できること。</li><li>オープン ソースで<a href="https://live.asp.net/">コミュニティ重視</a>。</li><li><a href="https://docs.microsoft.com/ja-jp/aspnet/core/blazor/?view=aspnetcore-3.1">最新のクライアント側フレームワーク</a>と開発ワークフローの統合。</li><li><a href="https://docs.microsoft.com/ja-jp/aspnet/core/grpc/?view=aspnetcore-3.1">gRPC</a> を使用したリモート プロシージャ コール (RPC) サービスのホストのサポート。</li><li>クラウド対応で環境ベースの<a href="https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/configuration/?view=aspnetcore-3.1">構成システム</a>。</li><li>組み込まれている<a href="https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1">依存性の注入</a>。</li><li>軽量で<a href="https://github.com/aspnet/benchmarks">高パフォーマンス</a>のモジュール化された HTTP 要求パイプライン。</li><li>次がホストする機能です。<ul><li><a href="https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-3.1">Kestrel</a></li><li><a href="https://docs.microsoft.com/ja-jp/aspnet/core/host-and-deploy/iis/?view=aspnetcore-3.1">IIS</a></li><li><a href="https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/servers/httpsys?view=aspnetcore-3.1">HTTP.sys</a></li><li><a href="https://docs.microsoft.com/ja-jp/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-3.1">Nginx</a></li><li><a href="https://docs.microsoft.com/ja-jp/aspnet/core/host-and-deploy/linux-apache?view=aspnetcore-3.1">Apache</a></li><li><a href="https://docs.microsoft.com/ja-jp/aspnet/core/host-and-deploy/docker/?view=aspnetcore-3.1">Docker</a></li></ul></li><li><a href="https://docs.microsoft.com/ja-jp/dotnet/standard/choosing-core-framework-server#side-by-side-net-versions-per-application-level">side-by-side でのバージョン管理</a>。</li><li>最新の Web 開発を簡単にするツール。<blockquote><p>ASP.NET Core 公式ドキュメントより抜粋</p></blockquote></li></ul></blockquote><p>参考：<a href="https://docs.microsoft.com/ja-jp/aspnet/core/?view=aspnetcore-3.1">ASP.NET Core 公式ドキュメント</a><br>参考：<a href="https://docs.microsoft.com/ja-jp/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-3.1">ASP.NET Coreについて</a></p><h2 id="gRPC-について"><a href="#gRPC-について" class="headerlink" title="gRPC について"></a>gRPC について</h2><p>次に、 gRPC についてご紹介します。</p><p>gRPC は言語に依存しない高性能なリモート プロシージャ コール（RPC）フレームワークです。</p><p>gRPC を用いることで、やり取りされるデータのシリアライズ・デシリアライズや通信部分はフレームワーク側がカバーしてくれるため、アプリケーション開発者はプロシージャを呼び出すクライアントと呼び出されるサーバプロシージャのみを実装すれば良いということになります。</p><p>gRPC ではデータのシリアライズに Protocol Buffers をデフォルトでは採用しています。Protocol Buffers はサービス間のインタフェースを定義する言語とそれを書くプログラミング言語のプログラムにコンパイルするツール群を含んでいます。Protocol Buffers では、公開する関数 (リモートプロシージャ) や、やり取りするデータの型を <code>.proto</code> ファイルにて定義し、 <code>.proto</code> ファイルからデータをシリアライズするプログラムのソースコードを自動生成することができ、対応する言語も C++/C#/Go/Java/Python etc… と豊富です。サービス間のインタフェースをコードとして静的に定義することが可能であるため、ソースコードの生成のみならず、ドキュメントの自動生成などもできます。</p><p>また、gRPC には次のような特徴を持ちます。</p><ul><li>Protocol Buffers を内部で用いているので他言語でのサーバ・クライアントの開発が可能です。</li><li>HTTP/2 による通信を行います。ゆえに双方向ストリーミング通信もサポートしています。</li><li>その手軽さと利便性から Netflix などでも採用されており、今後もユースケースの増加が見込まれます。</li></ul><p><img src="/blog/web-apps/GrpcChatOnAspNetCore/grpc.png" alt="gRPC を利用したサーバ・クライアント間通信の概念図"></p><p>参考：<a href="https://grpc.io/">gRPC 公式サイト</a><br>参考：<a href="https://developers.google.com/protocol-buffers">Protocol Buffers 公式サイト</a></p><h2 id="Hands-on：CLI-Chat-アプリ"><a href="#Hands-on：CLI-Chat-アプリ" class="headerlink" title="Hands-on：CLI Chat アプリ"></a>Hands-on：CLI Chat アプリ</h2><p>今回は gRPC で通信する Chat サーバと Chat クライアントを ASP.NET Core を用いて実装します。さらに gRPC で通信する Chat クライアントを C# とは別の言語（今回は go 言語）で実装し、 gRPC の「プログラミング言語に依存しない」という特徴も確認します。 ASP.NET Core を用いた gRPC サービスの開発が非常に容易であることも実感できると思います。</p><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p>以下の内容は以下の環境にて検証しました。</p><ul><li>OS：Windows 10 Enterprise バージョン 1903</li><li>IDE：Visual Studio 2019</li><li>Platform：.NET Core 3.1.401</li></ul><p>Visual Studio のインストールは<a href="https://docs.microsoft.com/ja-jp/visualstudio/install/install-visual-studio?view=vs-2019">こちら</a>を参考にしてください。</p><h3 id="今回作成する-Chat-サービスのインターフェース定義"><a href="#今回作成する-Chat-サービスのインターフェース定義" class="headerlink" title="今回作成する Chat サービスのインターフェース定義"></a>今回作成する Chat サービスのインターフェース定義</h3><p>今回の Chat サービスでは、<code>ChatRoom</code> が一つあり、そこにユーザが <code>Join</code> することで <code>Message</code> のやり取りができるものを考えます。</p><p>ユーザは一度 <code>ChatRoom</code> に <code>Join</code> すると、その <code>ChatRoom</code> 内での他のユーザの発言を知る必要があるため、Chat サーバ-Chatクライアント間には <code>Message</code> の流れる双方向ストリームが必要になります。</p><p>これを、 <code>chat.proto</code> として記述すると以下のようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package Chat;</span><br><span class="line"></span><br><span class="line">service ChatRoom &#123;</span><br><span class="line">  rpc join (stream Message) returns (stream Message) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Message &#123;</span><br><span class="line">  string user = 1;</span><br><span class="line">  string text = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gRPC-で通信する-Chat-サーバを-ASP-NET-Core-で実装する"><a href="#gRPC-で通信する-Chat-サーバを-ASP-NET-Core-で実装する" class="headerlink" title="gRPC で通信する Chat サーバを ASP.NET Core で実装する"></a>gRPC で通信する Chat サーバを ASP.NET Core で実装する</h3><p>まず Visual Studio を立ち上げ、「新しいプロジェクトの作成」から gRPC サービスのテンプレートを選択し、テンプレートプロジェクト（プロジェクト名： <code>GrpcChatServer</code> ）を作成します。</p><p>このとき、出来上がるテンプレートプロジェクトは、<a href="https://docs.microsoft.com/ja-jp/aspnet/core/tutorials/grpc/grpc-start?view=aspnetcore-3.1&tabs=visual-studio">公式ドキュメント</a>のチュートリアルにおける、「 Greeter サービス」と同じものです。このテンプレートプロジェクトには、 <code>Grpc.AspNetCore (2.31.0)</code> という ASP.NET Core で gRPC アプリケーションを作成するために必要なパッケージがインストール済みです。</p><p>このテンプレートに手を加えて、 Chat サービスを実装していきます。</p><p>まず最初に、 <code>chat.proto</code> を <code>GrpcChatServer/Protos</code> にコピーします。続けて、 <code>GrpcChatServer.csproj</code> に下記　<code>&lt;ItemGroup&gt;</code> を追加します。ここで　<code>GrpcServices=&quot;Server&quot;</code> と記載することで、 <code>.proto</code> ファイルから gRPC サーバ用のコードが自動生成されることになります。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Protobuf</span> <span class="attr">Include</span>=<span class="string">&quot;Protos\*.proto&quot;</span> <span class="attr">GrpcServices</span>=<span class="string">&quot;Server&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>次に、 <code>ChatRoom</code> クラスを <code>ChatRoom.cs</code> に記述します。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">using Chat;</span><br><span class="line">using Grpc.Core;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Collections.Concurrent;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace GrpcChatServer</span><br><span class="line">&#123;</span><br><span class="line">    public class ChatRoom</span><br><span class="line">    &#123;</span><br><span class="line">        private ConcurrentDictionary&lt;string, IServerStreamWriter&lt;Message&gt;&gt; users = new ConcurrentDictionary&lt;string, IServerStreamWriter&lt;Message&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        public bool HasJoined(string name) =&gt; users.ContainsKey(name);</span><br><span class="line">        public void Join(string name, IServerStreamWriter&lt;Message&gt; response)</span><br><span class="line">        &#123;</span><br><span class="line">            users.TryAdd(name, response);</span><br><span class="line">            Console.WriteLine($&quot;[INFO] &#123;name&#125; has joined the rooom.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        public void Remove(string name)</span><br><span class="line">        &#123;</span><br><span class="line">            users.TryRemove(name, out var _);</span><br><span class="line">            Console.WriteLine($&quot;[INFO] &#123;name&#125; has left the room.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public async Task BroadcastMessageAsync(Message message)</span><br><span class="line">        &#123;</span><br><span class="line">            await BroadcastMessages(message);</span><br><span class="line">            Console.WriteLine($&quot;[INFO] &#123;message.User&#125; has broadcasted a message &#x27;&#123;message.Text&#125;&#x27;.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private async Task BroadcastMessages(Message message)</span><br><span class="line">        &#123;</span><br><span class="line">            foreach (var user in users.Where(x =&gt; x.Key != message.User))</span><br><span class="line">            &#123;</span><br><span class="line">                var item = await SendMessageToSubscriber(user, message);</span><br><span class="line">                if (item != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    Remove(item?.Key);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private async Task&lt;Nullable&lt;KeyValuePair&lt;string, IServerStreamWriter&lt;Message&gt;&gt;&gt;&gt; SendMessageToSubscriber(KeyValuePair&lt;string, IServerStreamWriter&lt;Message&gt;&gt; user, Message message)</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                await user.Value.WriteAsync(message);</span><br><span class="line">                // Console.WriteLine($&quot;[INFO] broadcast message &#x27;&#123;message.Text&#125;&#x27; from &#x27;&#123;message.User&#125;&#x27;.&quot;);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception)</span><br><span class="line">            &#123;</span><br><span class="line">                // Console.WriteLine(ex);</span><br><span class="line">                return user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上で定義した <code>ChatRoom</code> を利用する <code>ChatService</code> を <code>ChatService.cs</code> に記述します。このとき、 <code>ChatService</code> クラスは gRPC によって自動生成された <code>ChatRoomBase</code> クラス ( <code>.proto</code> ファイルの <code>Service</code> に指定した名前の後に <code>Base</code> を付与して自動生成されるクラス) を継承する形で実装します。こうすることで、 Chat サービスを実装する際の通信回りの実装を基底クラスに委譲して、アプリ実装者はアプリケーションのロジックに専念することができるようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">using Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line">using Grpc.Core;</span><br><span class="line"></span><br><span class="line">using Chat;</span><br><span class="line"></span><br><span class="line">namespace GrpcChatServer</span><br><span class="line">&#123;</span><br><span class="line">    public class ChatService : Chat.ChatRoom.ChatRoomBase</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly ChatRoom _chatroomService;</span><br><span class="line">        private readonly ILogger&lt;ChatService&gt; _logger;</span><br><span class="line"></span><br><span class="line">        public ChatService(ChatRoom chatRoomService, ILogger&lt;ChatService&gt; logger)</span><br><span class="line">        &#123;</span><br><span class="line">            _chatroomService = chatRoomService;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override async Task join(IAsyncStreamReader&lt;Message&gt; requestStream, IServerStreamWriter&lt;Message&gt; responseStream, ServerCallContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!await requestStream.MoveNext()) return;</span><br><span class="line"></span><br><span class="line">            do</span><br><span class="line">            &#123;</span><br><span class="line">                if (!_chatroomService.HasJoined(requestStream.Current.User))</span><br><span class="line">                &#123;</span><br><span class="line">                    _chatroomService.Join(requestStream.Current.User, responseStream);</span><br><span class="line">                &#125;</span><br><span class="line">                await _chatroomService.BroadcastMessageAsync(requestStream.Current);</span><br><span class="line">            &#125; while (await requestStream.MoveNext());</span><br><span class="line"></span><br><span class="line">            _chatroomService.Remove(context.Peer);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上で定義した <code>ChatRoom</code> および <code>ChatService</code> を <code>Startup.cs</code> にて登録することで Chat サーバは完成です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using Microsoft.AspNetCore.Builder;</span><br><span class="line">using Microsoft.AspNetCore.Hosting;</span><br><span class="line">using Microsoft.AspNetCore.Http;</span><br><span class="line">using Microsoft.Extensions.DependencyInjection;</span><br><span class="line">using Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line">namespace GrpcChatServer</span><br><span class="line">&#123;</span><br><span class="line">    public class Startup</span><br><span class="line">    &#123;</span><br><span class="line">        // This method gets called by the runtime. Use this method to add services to the container.</span><br><span class="line">        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940</span><br><span class="line">        public void ConfigureServices(IServiceCollection services)</span><br><span class="line">        &#123;</span><br><span class="line">            services.AddGrpc();</span><br><span class="line">            services.AddSingleton&lt;ChatRoom&gt;(); // ここで ChatRoom を登録</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span><br><span class="line">        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)</span><br><span class="line">        &#123;</span><br><span class="line">            if (env.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseDeveloperExceptionPage();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            app.UseRouting();</span><br><span class="line"></span><br><span class="line">            app.UseEndpoints(endpoints =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                endpoints.MapGrpcService&lt;ChatService&gt;(); // ここで ChatService を登録</span><br><span class="line"></span><br><span class="line">                endpoints.MapGet(&quot;/&quot;, async context =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    await context.Response.WriteAsync(&quot;Communication with gRPC endpoints must be made through a gRPC client. To learn how to create a client, visit: https://go.microsoft.com/fwlink/?linkid=2086909&quot;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このように、 ASP.NET Core を用いて gRPC サービスを実装する際には、データのシリアライズや通信回りの実装を自動生成されたコードに委譲し、アプリケーション固有のロジックの実装に専念することができるようになります。</p><h3 id="gRPC-で通信する-Chat-クライアントを-ASP-NET-Core-で実装する"><a href="#gRPC-で通信する-Chat-クライアントを-ASP-NET-Core-で実装する" class="headerlink" title="gRPC で通信する Chat クライアントを ASP.NET Core で実装する"></a>gRPC で通信する Chat クライアントを ASP.NET Core で実装する</h3><p>Visual Studio を立ち上げ、「新しいプロジェクトの作成」から「コンソールアプリ（.NET Core）」を選択し、テンプレートプロジェクト（プロジェクト名： <code>GrpcChatClient</code> ）を作成します。</p><p>まず最初に以下の三つのパッケージを <code>GrpcChatClient</code> にインストールします。</p><ul><li><code>Google.Protobuf (2.31.0)</code></li><li><code>Grpc.Net.Clien (2.31.0)</code></li><li><code>Grpc.Tools (2.31.0)</code></li></ul><p>つづけて、 <code>GrpcChatClient</code> プロジェクト内に <code>Protos</code> フォルダを作成し、<code>GrpcChatServer</code> と同じ <code>chat.proto</code> ファイルをコピーし、 <code>GrpcChatClient.csproj</code> に以下の <code>&lt;ItemGroup&gt;</code> を追加します。ここでも同様に<code>GrpcServices=&quot;Client&quot;</code> と記載することで、 <code>.proto</code> ファイルから gRPC クライアント用のコードが自動生成されることになります。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Protobuf</span> <span class="attr">Include</span>=<span class="string">&quot;Protos\*.proto&quot;</span> <span class="attr">GrpcServices</span>=<span class="string">&quot;Client&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最後に、 <code>Program.cs</code> に Chat クライアントのコードを記述してクライアントの実装は終了です。クライアントの実装では、サーバの実装と同様に gRPC によって自動生成されたクライアント用コードを <code>using</code> することで用います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">using Grpc.Net.Client;</span><br><span class="line">using Chat; // ここで gRPC によって自動生成されたコードを利用することを宣言</span><br><span class="line"></span><br><span class="line">namespace GrpcChatClient</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static async Task Main()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;[INFO] Hello World! I am GrpcChatClient!&quot;);</span><br><span class="line">            Console.Write(&quot;Input your user name: &quot;);</span><br><span class="line"></span><br><span class="line">            var userName = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">            var channel = GrpcChannel.ForAddress(&quot;https://localhost:5001&quot;);</span><br><span class="line">            var client = new ChatRoom.ChatRoomClient(channel);</span><br><span class="line"></span><br><span class="line">            using (var chat = client.join())</span><br><span class="line">            &#123;</span><br><span class="line">                _ = Task.Run(async () =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    while (await chat.ResponseStream.MoveNext(cancellationToken: CancellationToken.None))</span><br><span class="line">                    &#123;</span><br><span class="line">                        var response = chat.ResponseStream.Current;</span><br><span class="line">                        Console.WriteLine($&quot;[&#123;response.User&#125;]: &#123;response.Text&#125;&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                await chat.RequestStream.WriteAsync(new Message &#123; User = userName, Text = $&quot;[INFO] &#123;userName&#125; has joined the room.&quot; &#125;);</span><br><span class="line"></span><br><span class="line">                string line;</span><br><span class="line">                while ((line = Console.ReadLine()) != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (line.ToLower() == &quot;bye&quot;)</span><br><span class="line">                    &#123;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    await chat.RequestStream.WriteAsync(new Message &#123; User = userName, Text = line &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                await chat.RequestStream.CompleteAsync();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;[INFO] Disconnecting...&quot;);</span><br><span class="line">            await channel.ShutdownAsync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここまで終了したら、いよいよサーバとクライアントを通信させることができます。</p><p>複数コマンドプロンプトを立ち上げて、サーバとクライアントをそれぞれ実行し、通信することができるかを確かめてみましょう。</p><p><img src="/blog/web-apps/GrpcChatOnAspNetCore/2client1server.png" alt="クライアント2つ、サーバ1つで通信させた様子"></p><p>（画像右半分がサーバアプリの画面、画像左半部がクライアントアプリの画面）</p><h3 id="gRPC-で通信する-Chat-クライアントを-go-で実装する"><a href="#gRPC-で通信する-Chat-クライアントを-go-で実装する" class="headerlink" title="gRPC で通信する Chat クライアントを go で実装する"></a>gRPC で通信する Chat クライアントを go で実装する</h3><p>gRPC は、サービスのインタフェースが Protocol Buffer という、プログラミング言語とは独立した形で記述されることから、互いに異なるプログラミング言語を用いてサーバとクライアントを開発することが容易であるという特徴があります。</p><p>そこで、ここまでで開発した Chat サーバと通信する Chat クライアントを C# とは別の <a href="https://golang.org/">Go</a> という言語で開発してみましょう。なお、今回はあくまで検証用のサンプルのご紹介であり、go 言語のサンプルアプリのサポートや以下の環境構築に関するサポートは弊社では行っておりませんことご了承ください。</p><p>Windows における Go/gRPC 開発環境の構築については下記サイトなどを参考に行ってください。</p><p>参考：<a href="https://golang.org/doc/install">https://golang.org/doc/install</a><br>参考：<a href="https://grpc.io/blog/installation/">https://grpc.io/blog/installation/</a></p><p>Go でのクライアント実装でも、コマンドで通信部分のソースコードを自動生成し、それを利用する形でクライアントを記述していくことには変わりありません。</p><p>Chat クライアントの Go 実装については下記リポジトリを参考にしてください。</p><p>Go クライアントリポジトリ：<a href="https://github.com/jpdsi/GrpcChatSample/tree/master/GrpcChatClientGo/chat">https://github.com/jpdsi/GrpcChatSample/tree/master/GrpcChatClientGo/chat</a></p><h3 id="実際に通信させてみる"><a href="#実際に通信させてみる" class="headerlink" title="実際に通信させてみる"></a>実際に通信させてみる</h3><p>Go 実装のクライアントと C# 実装のクライアント、 C# 実装のサーバを立ち上げ実際に通信できることを確認してみます。</p><p><img src="/blog/web-apps/GrpcChatOnAspNetCore/3client1server.png" alt="Go 実装クライアントと C# 実装クライアントが C# 実装サーバと通信をしている様子"></p><p>（画像右上がサーバアプリの画面、画像下半分が C# クライアントアプリの画面、画像左上が Go クライアントアプリの画面）</p><p>このように、 gRPC では異なる言語によるサーバ・クライアントの実装が容易に実現することができます。</p><p>今回作ったチャットアプリのコードは以下のリポジトリにあります。</p><p>リポジトリ：<a href="https://github.com/jpdsi/GrpcChatSample">https://github.com/jpdsi/GrpcChatSample</a></p><h2 id="他のサンプルも見てみたい方へ"><a href="#他のサンプルも見てみたい方へ" class="headerlink" title="他のサンプルも見てみたい方へ"></a>他のサンプルも見てみたい方へ</h2><p>今回は gRPC を使った Chat サービスを ASP.NET Core を利用して実装してみました。<br>gRPC では他にも様々な通信をサポートしており、 ASP.NET Core による実装例も以下のリポジトリから確認することができます。</p><p>ASP.NET Core を利用した gRPC 開発を検討の際には、開発したいものに合わせたサンプルを参照すると、参考になるかと思います。</p><p>サンプルリポジトリ：<a href="https://github.com/grpc/grpc-dotnet/tree/master/examples">https://github.com/grpc/grpc-dotnet/tree/master/examples</a></p><p>今回は以上です。<br>ASP.NET CoreでgRPCを簡単に実装できることがお分かりいただけましたでしょうか？<br>それでは、また次回！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。&lt;br&gt;Developer Support Internet チーム にてインターンをしている尾崎耀一と申します！&lt;/p&gt;
&lt;p&gt;今回は ASP.NET Core を用いて、 gRPC で動く CLI （コマンドライン）でチャットができるアプリを作る方法を紹介し</summary>
      
    
    
    
    
    <category term="ASP.NET Core" scheme="https://jpdsi.github.io/blog/tags/ASP-NET-Core/"/>
    
    <category term="gRPC" scheme="https://jpdsi.github.io/blog/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>自社開発した Microsoft Edge (Chromium) の拡張機能を社内で自動展開する方法</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/how-to-deploy-edge-extensions/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/how-to-deploy-edge-extensions/</id>
    <published>2020-08-25T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.021Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。</p><p>今回は、自社開発などで Microsoft Store に登録されていない Microsoft Edge (Chromium) の拡張機能を、社内で自動展開する方法について紹介します。拡張機能のサンプルは <a href="https://docs.microsoft.com/ja-jp/microsoft-edge/extensions-chromium/getting-started/part1-simple-extension">チュートリアル</a> からダウンロードできます。</p><span style="color: red;">自動展開 (強制インストール) を行うには、Microsoft Active Directory ドメインに参加している Windows デバイスである必要があります。ドメインに参加していない Windows デバイスについては、強制インストールは Microsoft Store で利用できる拡張機能に限定されます。</span><h2 id="拡張機能のパック-CRX-ファイルの作成-と-ID-の確認"><a href="#拡張機能のパック-CRX-ファイルの作成-と-ID-の確認" class="headerlink" title="拡張機能のパック (CRX ファイルの作成) と ID の確認"></a>拡張機能のパック (CRX ファイルの作成) と ID の確認</h2><p>まずは開発した (用意した) 拡張機能をパッケージ化する必要があります。パッケージ化と ID の確認は以下の手順で行います。</p><ol><li>edge://extensions を開いて [開発者モード] を有効にします。</li></ol><p><img src="/blog/internet-explorer-microsoft-edge/how-to-deploy-edge-extensions/developer-mode.png" alt="開発者モード"></p><ol start="2"><li>[拡張機能のパック] をクリックして、[拡張ルート ディレクトリ] に用意した拡張機能のルートを指定します。</li></ol><p><img src="/blog/internet-explorer-microsoft-edge/how-to-deploy-edge-extensions/pack-extension.png" alt="拡張機能のパックをクリック"></p><p><img src="/blog/internet-explorer-microsoft-edge/how-to-deploy-edge-extensions/pack-extension-2.png" alt="拡張機能のパックのダイアログ"></p><ol start="3"><li>[拡張機能のパック] ボタンをクリックすると、指定したパスの親フォルダーにパッケージ (CRX ファイル) が作成されます。</li></ol><p>※ 秘密鍵 (PEM ファイル) は今回使用しませんが、今後拡張機能をアップデートして再パッケージする際に必要になります</p><ol start="4"><li>作成された CRX ファイルを Microsoft Edge にドラッグ &amp; ドロップして [拡張機能の追加] をクリックします。</li></ol><p><img src="/blog/internet-explorer-microsoft-edge/how-to-deploy-edge-extensions/add-extension.png" alt="拡張機能の追加"></p><ol start="5"><li>追加された拡張機能を確認し、ID とバージョン番号をメモしておきます。</li></ol><p><img src="/blog/internet-explorer-microsoft-edge/how-to-deploy-edge-extensions/confirm-extension-id.png" alt="拡張機能の ID を確認"></p><h2 id="CRX-ファイルの-Web-サーバーへの配置と更新マニフェストの作成"><a href="#CRX-ファイルの-Web-サーバーへの配置と更新マニフェストの作成" class="headerlink" title="CRX ファイルの Web サーバーへの配置と更新マニフェストの作成"></a>CRX ファイルの Web サーバーへの配置と更新マニフェストの作成</h2><p>作成した CRX ファイルを Web サーバーに配置し、ダウンロードできることを確認しておきます。<br>CRX ファイルは既定で許可された MIME タイプではないため、Web サーバーで設定が必要な場合があります。<br>例えば、IIS では、以下のように Web.config で MIME タイプの設定を行う必要があります。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">staticContent</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">&quot;.crx&quot;</span> <span class="attr">mimeType</span>=<span class="string">&quot;application/x-chrome-extension&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>更新マニフェスト (XML ファイル) を作成し、同じく Web サーバーに配置します。<br>更新マニフェストは、以下のような内容のファイルを用意します。ID とバージョンは先ほどメモした値を使用し、codebase には CRX ファイルの URL を記載します。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gupdate</span> <span class="attr">xmlns</span>=<span class="string">&#x27;http://www.google.com/update2/response&#x27;</span> <span class="attr">protocol</span>=<span class="string">&#x27;2.0&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app</span> <span class="attr">appid</span>=<span class="string">&#x27;gcfmppplpjjdihbhljakgaihencjcngk&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">updatecheck</span> <span class="attr">codebase</span>= <span class="string">&#x27;https://edgewatcher.azurewebsites.net/nasa_picture_viewer.crx&#x27;</span> <span class="attr">version</span>=<span class="string">&#x27;0.0.0.1&#x27;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gupdate</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="グループ-ポリシーを構成する"><a href="#グループ-ポリシーを構成する" class="headerlink" title="グループ ポリシーを構成する"></a>グループ ポリシーを構成する</h2><p>拡張機能の自動展開のために <a href="https://docs.microsoft.com/ja-jp/DeployEdge/microsoft-edge-policies#extensioninstallforcelist">サイレント インストールされる拡張機能を制御する</a> のグループ ポリシーを構成します。<br>値の部分には、拡張機能の ID と更新マニフェストの URL をセミ コロン (;) で連結した文字列を設定します。<br>ポリシーが正しくクライアントに適用されたかどうかは、edge://policy で確認できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcfmppplpjjdihbhljakgaihencjcngk;https://edgewatcher.azurewebsites.net/nasa_picture_viewer.xml</span><br></pre></td></tr></table></figure><p>以上で設定は完了です。正しく設定できていれば、Microsoft Edge 起動時に自動的に拡張機能がインストールされ、有効になります。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。&lt;/p&gt;
&lt;p&gt;今回は、自社開発などで Microsoft Store に登録されていない Microsoft Edge (Chromium) の拡張機能を、社内で自動展開する方法について紹介します。拡張機能のサンプルは &lt;a href=&quot;https://doc</summary>
      
    
    
    
    
    <category term="Microsoft Edge" scheme="https://jpdsi.github.io/blog/tags/Microsoft-Edge/"/>
    
    <category term="Chromium" scheme="https://jpdsi.github.io/blog/tags/Chromium/"/>
    
    <category term="Extensions" scheme="https://jpdsi.github.io/blog/tags/Extensions/"/>
    
  </entry>
  
  <entry>
    <title>IE の調査に必要なダンプ ファイルの採取について</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/dump/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/dump/</id>
    <published>2020-06-22T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.017Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。</p><p>Internet Explorer は Web コンテンツ (html や CSS、JavaScript、画像、動画などなど) を表示 / 動作させるための、いわば「プラットフォーム」です。<br>Web コンテンツ自体の構成やその中で行われている処理が、プラットフォームであるInternet Explorer に影響を及ぼすことも多くあります。<br>また、Internet Explorer  を取り巻く環境に影響を受けることも多々あります。<br>例えば、アドオンやサードパーティ製のソフトウェアの影響を受けてしまうことも。</p><p>このような状況で Internet Explorer を使っていると、「Internet Explorer は動作を停止しました」や「XXXX は応答していません」という事象が発生することがあります。<br>そんなとき、原因究明の最初の一歩となる情報がダンプ ファイルです。</p><p>ダンプ ファイルは、採取していただく瞬間の状態を記録するものとなります。<br>写真と同じと考えていただけると分かりやすいと思います。<br>写真を撮るとき、シャッターチャンスを逃してしまい、撮りたいものが何も写っていないということがありますが、実はダンプ ファイルも同じことが言えます。<br>このため、ダンプ ファイルはタイミングを見計らって採取していただくことがとても重要となります。</p><p>お問い合わせいただいた際に、上述のような事象の場合はダンプ ファイルの取得をお願いすることがありますが、せっかく取得していただいたファイルに手がかりが何も残っていないということがよくあります。<br>このため今回はダンプ ファイルの採取方法についてご案内いたします。</p><p>以下のような手順でダンプ ファイルを採取していただき、お問い合わせの際にご提供いただけますと、事象の解決までスムーズに進められますので、ぜひご確認ください！</p><h2 id="ハングしているときには"><a href="#ハングしているときには" class="headerlink" title="ハングしているときには"></a>ハングしているときには</h2><p>Internet Explorer がハングしている (応答なし) ときは、以下のようなメッセージが表示されています。</p><p>　 <img src="/blog/internet-explorer-microsoft-edge/dump/IEHangBar.png" alt="IEHangBar"></p><p>この場合は、渋滞中の高速道路と似ています。渋滞が発生している最中にその状況を確認しなければ、解消してからでは何が起こっていたのかは分かりません。<br>さらに、渋滞の列のどこで何が起こっているのかを確認するためには、複数の箇所を確認する必要があります。</p><p>このためハングしている場合は、ダンプファイルは上記の通知バーが表示されている間（事象が起こっている間）に、“間隔をあけて”、“複数回” ダンプファイルの採取を実行してください。<br>こうすることで、処理がループしているような箇所を可能な限り絞り込むための有効な情報となります。<br>通知バーが消えてしまいますと、ハング状態から回復し、正常な状態となってしまうため、重要な証拠写真を取り損ねてしまいます。<br>採取のタイミングには十分ご注意ください。</p><h2 id="クラッシュしているときには"><a href="#クラッシュしているときには" class="headerlink" title="クラッシュしているときには"></a>クラッシュしているときには</h2><p>Internet Explorer がクラッシュしている（異常終了）のときは、以下のようなメッセージが表示されています。</p><p>　<img src="/blog/internet-explorer-microsoft-edge/dump/IEcrashDialog.png" alt="IEcrashDialog"></p><p>この場合は、交通事故でいうと “事故直後” と同様で、すでに事象が発生している状態となります。<br>事故によりどこが大きく破損しているか、被害者はいるのか、など事故につながる情報を収集することと似ています。<br>すでに起こった事象の情報が取得できればよいため、ダンプファイルの採取（証拠写真の撮影）は “1 回” で大丈夫です。</p><p>ここまで注意点をまとめてきましたが、何より一番大事なことは、<strong>事象を再現させること</strong> になります。<br>なかなか再現しない場合は、まずは再現率を上げる、もしくは再現条件の確立を目指しましょう。<br>その過程で、ダンプファイルを取得することなく解決する場合も多々あります。</p><p>ここまでできましたら、以下の操作で証拠写真（ダンプファイル）を撮りましょう。</p><h2 id="事象が再現したら"><a href="#事象が再現したら" class="headerlink" title="事象が再現したら"></a>事象が再現したら</h2><p>事象が再現しましたら、以下の手順でダンプファイルを採取します。<br>ハングの場合もクラッシュの場合も採取方法は同じです。<br>ただし、ハングの場合は後述にもありますように、複数回操作をしていただく必要がありますのでご注意ください！</p><p>1．タスクバーを右クリックして、タスク マネージャーを起動します。 </p><p> <img src="/blog/internet-explorer-microsoft-edge/dump/Step1.png" alt="Step1"></p><ol start="2"><li>[詳細] タブを開きます。</li></ol><p> <img src="/blog/internet-explorer-microsoft-edge/dump/Step2.png" alt="Step2"></p><ol start="3"><li><p>[名前] 列をクリックしてソートし、”iexplore.exe” を探します。<br>※ “iexplore.exe” のプロセスは複数存在しますので、すべてのプロセスに対して取得してください。</p></li><li><p>3 で探したすべての iexplore.exe に対して 1 つずつ、右クリック メニューから [ダンプ ファイルの作成] を選択します。</p></li></ol><p> <img src="/blog/internet-explorer-microsoft-edge/dump/Step4.png" alt="Step4"></p><ol start="5"><li>ダンプ ファイルの作成に成功すると、ダイアログで保存場所が表示されるため、確認しておきます。<br>※ 既定では、環境変数 TEMP フォルダー以下に作成され、iexplore.DMP、iexplore (2).DMP のようなファイル名となります。</li></ol><p> <img src="/blog/internet-explorer-microsoft-edge/dump/Step5.png" alt="Step5"></p><p>※    クラッシュの場合の手順はここまでです。</p><h3 id="★ハング事象の場合"><a href="#★ハング事象の場合" class="headerlink" title="★ハング事象の場合"></a>★ハング事象の場合</h3><p>上述の手順3～5 を間隔を空けながら 2、3 回繰り返します。<br>※ 例えば、事象が 2 ～ 3 分続く場合は、30 秒ごとに採取するなど、事象発生時間に合わせて採取します。<br>※ 上記のスクリーンショットの例では、３つの iexplore.exe が存在したため、同じ操作を2回ずつ実施すると、iexplore.DMP、iexplore (2).DMP、iexplore (3).DMP、… と6つのファイルができます。</p><h3 id="★ハング事象の発生時間が短いなら"><a href="#★ハング事象の発生時間が短いなら" class="headerlink" title="★ハング事象の発生時間が短いなら"></a>★ハング事象の発生時間が短いなら</h3><p>ハングの場合は事象発生中に複数回実施する必要があるため、事象発生時間が短い場合は上述の手順では採取が難しいことがあります。<br>その場合、ProcDump というツールを利用すると、上述の手順 4 でご紹介しているIE のすべてのプロセスのダンプ ファイルを一気に取得できます。<br>タスクマネージャーから手動で実行する手間がないので、ハング事象が 30 秒などと短い場合にはこちらの方法で取得することをお勧めしております。</p><p>1．ProcDump ツールは以下のサイトから実行ファイルをダウンロードできます。</p><p>　<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/procdump">https://docs.microsoft.com/en-us/sysinternals/downloads/procdump</a></p><p>2．ProcDump の実行ファイルと以下の VBScript を事前に端末に配置します。<br>　※　いつでも実行できますので、IE を起動して、コマンドを実行したときに、ダンプ ファイルが取得できるかを事前にご確認ください。</p><p>なお、以下のサンプルスクリプトでは、C:\dump フォルダーに procdump.exe を格納し、コマンド実行すると、c:\dump フォルダーに、IE のダンプを出力するという例になります。<br>※    フォルダーは任意の場所を指定してください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Set objWMIService = GetObject(&quot;winmgmts:\\.\root\cimv2&quot;) </span><br><span class="line">Set colItems = objWMIService.ExecQuery(&quot;Select * From Win32_Process&quot;) </span><br><span class="line"></span><br><span class="line">Set WshShell = WScript.CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line"></span><br><span class="line">For Each objItem in colItems </span><br><span class="line">    If InStr(LCase(objItem.CommandLine), &quot;iexplore.exe&quot;) Then </span><br><span class="line">        WshShell.Exec(&quot;c:\dump\procdump.exe -accepteula -ma &quot;&amp;objItem.ProcessID&amp;&quot; c:\dump\ie&quot;&amp;objItem.ProcessID&amp;&quot;.dmp&quot;)</span><br><span class="line">    End If </span><br><span class="line">Next</span><br></pre></td></tr></table></figure><p>3．IE を起動して、ハングの事象が発生しましたら、発生中に間隔をあけて手順 2 の VBScript を数回実行します。</p><p>原因究明の最初の一歩となるダンプファイルが取得できましたら、発生する現象について詳細なご説明を添えて、私共、サポートチームへお問い合せください！</p><p>今回は以上です。 それでは、また次回！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。&lt;/p&gt;
&lt;p&gt;Internet Explorer は Web コンテンツ (html や CSS、JavaScript、画像、動画などなど) を表示 / 動作させるための、いわば「プラットフォーム」です。&lt;br&gt;Web コンテンツ自体の構成やその中で行われてい</summary>
      
    
    
    
    
    <category term="Internet Explorer" scheme="https://jpdsi.github.io/blog/tags/Internet-Explorer/"/>
    
    <category term="Dump" scheme="https://jpdsi.github.io/blog/tags/Dump/"/>
    
  </entry>
  
  <entry>
    <title>まだデフォルトIE？ 新しい Microsoft Edge を使いませんか？</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/how-about-using-new-edge/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/how-about-using-new-edge/</id>
    <published>2020-06-02T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.021Z</updated>
    
    <content type="html"><![CDATA[<p>今回は、<strong>Internet Explorer は可能な限り利用せずに Microsoft Edge などモダン ブラウザーを利用しましょう</strong>という話です。</p><p>「<a href="https://social.msdn.microsoft.com/Forums/ja-JP/47290e24-fc66-4d3e-a2de-429643758d40/internet-explorer-12398201702446012395123881235612390?forum=edgeiesupportteamja">Internet Explorer の今後について</a>」という記事を公開してから１年ちょっと経ちました。</p><blockquote><p>Windows 10 においては、Microsoft Edge と Internet Explorer というふたつのブラウザーが搭載されていますが、弊社としましては、<span style="background: linear-gradient(transparent 80%, #ffcc99 80%)">Internet Explorer との後方互換性が必要な業務 Web システムには Internet Explorer を利用いただき、Internet Explorer でなければならない場合以外は Microsoft Edgeをご利用いただくことを提案</span>してきました。</p></blockquote><p>2015 年に Microsoft Edge をリリースして以降、<strong>Internet Explorer は従来の Web アプリケーションとの後方互換性のために残しているブラウザー</strong>という位置づけです。業務のための Web アプリケーションが、古いブラウザーである Internet Explorer 固有の機能 (ActiveX コントロール、ブラウザー ヘルパー オブジェクト、VBScript などの古い技術) に依存していて、モダン ブラウザーでは扱えないという悩みは多くの企業が抱えています。古い Web アプリケーションを見直して、モダン ブラウザーで表示できるようにするまでの間はどうしても Internet Explorer が不可欠ですので、Windows 10 でも Internet Explorer が残されています。</p><p>Internet Explorer と Microsoft Edge の位置づけは上述のとおりですが、私たちサポート チームが対応するお問い合せの中で「Internet Explorer で表示に時間がかかります。Chrome では問題ありません。」という内容をよくみかけます。こういうお問い合せでは『Internet Explorer でなければならない理由は何か？』が焦点になります。</p><p>以下は 5 年前の記事ですが、この当時でも、Microsoft Edge や Google Chrome と比較した場合 Internet Explorer は 5 割程度のスクリプト性能でした。</p><p>Delivering fast JavaScript performance in Microsoft Edge<br><a href="https://blogs.windows.com/msedgedev/2015/05/20/delivering-fast-javascript-performance-in-microsoft-edge/">https://blogs.windows.com/msedgedev/2015/05/20/delivering-fast-javascript-performance-in-microsoft-edge/</a></p><p>この 5 年の間もモダン ブラウザーは積極的な開発が続けられていますが、レガシー ブラウザーである Internet Explorer は最新の Web 標準のサポートやパフォーマンスの向上への注力はしていませんので、パフォーマンスの差はさらに広がっています。どのような Web ページの表示が遅いのかを伺ってみると、ほとんどの場合は、最新の Web 標準の技術を取り入れたリッチなコンテンツでしたので、上記のことを考えれば、Internet Explorer としてのパフォーマンス性能の限界と言えます。こういった問題を回避するためにも <a href="https://blogs.windows.com/japan/2020/01/16/upgrading-new-microsoft-edge-79-chromium/">Chromium ベースの新しい Microsoft Edge</a> の利用を強くおすすめします。</p><p>新しい Microsoft Edge では『IE モード』という機能を搭載しています。一言でいうと『Microsoft Edge の画面の中で Internet Explorer が動く』というものです。詳細は <a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode">公式ドキュメント</a> や <a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/IEMode/">サポート チームのブログ記事</a> をご覧いただければと思いますが、適切に制御することで、ユーザーが Internet Explorer と Microsoft Edge を意識的に使い分ける操作をせずに、Internet Explorer を必要とする古い技術で作られた Web アプリケーションを、Microsoft Edge の中でシームレスに閲覧できるようになります。IE モードの登場により、『Internet Explorer を単独で動かすのではなく、IE/Edge どちらにも対応したブラウザ環境を提供』→『今後は IE ではなく、Microsoft Edge で動作する Web アプリケーションを用意する』という段階的な移行を進めやすくなりました。ぜひ活用していただければと思います。</p><p>最後に、『最新の Web 標準の技術を取り入れたリッチなコンテンツ』の例を挙げます。弊社製品のひとつである Power BI ですが、以下の公式ドキュメントでサポートされるブラウザーについて記述があります。</p><p>Power BI のサポートされているブラウザー<br><a href="https://docs.microsoft.com/ja-jp/power-bi/power-bi-browsers">https://docs.microsoft.com/ja-jp/power-bi/power-bi-browsers</a></p><blockquote><p>Power BI はこれらのサポートされているすべてのブラウザーで動作するように設計されていますが、<span style="background: linear-gradient(transparent 80%, #ffcc99 80%)">選択したブラウザーによってパフォーマンスは異なります。 特に Internet Explorer を使用している場合は、パフォーマンスが低下する可能性があります。 パフォーマンスを向上させるには、Internet Explorer から Microsoft Edge などの最新のブラウザーに切り替えることを強くお勧めします。</span> Edge Chromium を使用すると、Microsoft Edge のパフォーマンスは引き続き向上することが期待されています。 それでも許容できないパフォーマンスが発生する場合は、サポートされている他の最新のブラウザーをテストして、Power BI ソリューションでより良い結果が得られるかどうかを確認します。</p></blockquote><p>私たちブラウザー サポート チームがいつも言いたいことをしっかりと書いてくれています。イマドキのことをやるなら最新のブラウザーを使うべきです。もちろん組織ごとに事情はあるでしょう。でも、古いブラウザーを使い続けると、多くのユーザーがパフォーマンスに不満を感じたり、組織としての生産性にも影響を及ぼしかねません。イマドキのコンテンツに見合った最新のブラウザーを使うことでユーザーは快適に作業できるようになります。IT 管理者のみなさん、まずはモダン化の一歩を踏み出してみませんか。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今回は、&lt;strong&gt;Internet Explorer は可能な限り利用せずに Microsoft Edge などモダン ブラウザーを利用しましょう&lt;/strong&gt;という話です。&lt;/p&gt;
&lt;p&gt;「&lt;a href=&quot;https://social.msdn.microso</summary>
      
    
    
    
    
    <category term="Microsoft Edge" scheme="https://jpdsi.github.io/blog/tags/Microsoft-Edge/"/>
    
    <category term="IE モード" scheme="https://jpdsi.github.io/blog/tags/IE-%E3%83%A2%E3%83%BC%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>New Microsoft Edge でレッツ サーフィン</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/</id>
    <published>2020-06-01T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.005Z</updated>
    
    <content type="html"><![CDATA[<p>皆様、いい波乗ってますか？<br>2020 年 5 月、New Microsoft Edge 安定版 83 がリリースされました。<br>いくつかの機能追加や修正が加えられていますが、今回私たち Microsoft ブラウザサポートチームから紹介するのはこれ！</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/01.jpg" alt="01"></p><p>これまで隠し機能として搭載されていたサーフ ゲームが誰でも遊べるようになりました。</p><p>  Introducing the new surf game in Microsoft Edge<br>  <a href="https://blogs.windows.com/msedgedev/2020/05/26/surf-game-edge-stable/">https://blogs.windows.com/msedgedev/2020/05/26/surf-game-edge-stable/</a></p><p>このゲームへのアクセス方法は簡単！New Microsoft Edge のアドレスバーに “edge://surf” と入力するだけです。<br>もしまだ New Microsoft Edge をインストールされていなければ、こちらの<a href="https://www.microsoft.com/ja-jp/edge">ダウンロードサイト</a>からどうぞ！</p><p>当然、我々サポートチームも New Microsoft Edge の機能を網羅すべくがっつりやり込みました。<br>その勢いに任せて、今回はサーフ ゲームのレッツ サーフィン モードの攻略を、以下の構成でお話ししていきます。</p><ol><li>レッツ サーフィン</li><li>クラーケンに始まりクラーケンに終わる</li><li>ゲームバランスが神ってる</li><li>障害物基礎</li><li>最後に</li></ol><h1 id="1-レッツ-サーフィン"><a href="#1-レッツ-サーフィン" class="headerlink" title="1. レッツ サーフィン"></a>1. レッツ サーフィン</h1><p>まずは遊び方を確認しましょう。画面右上のハンバーガーメニューから「プレイ方法」をクリック。<br>“ゲーム モード” が “レッツ サーフィン” であることを確認しておきましょう。他にもモードがありますがそれはまた別の機会に。</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/02.jpg" alt="02"></p><p>なるほど、レッツ サーフィンは障害物やクラーケンを避けながら、とにかくゲームが終わらないように続ければよいゲームのようです。<br>ゲームオーバーの条件についてここには書かれていないですが、ライフであるハートが 0 になるとゲームオーバーです。<br>ライフの最大は 2 で、ハートを取ることで回復します。</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/03.jpg" alt="03"></p><p>それにしても “障害物” と”クラーケン” ってなんでしょう。先ほどのハンバーガーメニューから、高視認性モードをオンにして確認してみましょう。<br>画面の黒い四角で囲われているオブジェクトが障害物で、同じく黒い四角で囲われている紫の足がクラーケンです。<br>赤い点線で表示されているオブジェクトは、ライフは削られないもののスピードが遅くなったり進行方向が変更されたりするオブジェクトです。<br>緑はライフの回復や加速パワーアップなどポジティブな効果があります。</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/04.jpg" alt="04"></p><p>細かい説明を書いていくと超大作な記事になってしまうので概要はこの辺にして、攻略に入って行きましょう。</p><h1 id="2-クラーケンに始まりクラーケンに終わる"><a href="#2-クラーケンに始まりクラーケンに終わる" class="headerlink" title="2. クラーケンに始まりクラーケンに終わる"></a>2. クラーケンに始まりクラーケンに終わる</h1><p>このゲームはライフが 3 つあります。<br>障害物にあたると 1 つ減ります。逆に考えると 3 回もあたることができて、その間にハートを取れば回復可能です。余裕です。<br>一方クラーケンはライフが 3 つあっても、触れてしまえば即ゲームオーバーです。無慈悲です。</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/05.jpg" alt="05"></p><p>そのため、クラーケン対策を行うことが、ハイスコアを伸ばす最優先事項になります。※あくまで個人の見解です<br>主な対策方法は、以下の 4 つです。</p><p>A. クラーケンの足に近寄らない<br>B. 迫りくるクラーケンを障害物にひっかける<br>C. 加速パワーアップで振り切る<br>D. 犬シールド  </p><p>それぞれ見ていきましょう。</p><h2 id="A-クラーケンの足に近寄らない"><a href="#A-クラーケンの足に近寄らない" class="headerlink" title="A. クラーケンの足に近寄らない"></a><u>A. クラーケンの足に近寄らない</u></h2><p>一番重要じゃないかもしれません。<br>というのもこの足に近寄らなくても他の条件でクラーケンは発生している気がするからです。<br>とはいえ、君子危うきに近寄らず。明らかに怪しいもの近づくのはやめておきましょう。</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/06.jpg" alt="06"></p><h2 id="B-迫りくるクラーケンを障害物にひっかける"><a href="#B-迫りくるクラーケンを障害物にひっかける" class="headerlink" title="B. 迫りくるクラーケンを障害物にひっかける"></a><u>B. 迫りくるクラーケンを障害物にひっかける</u></h2><p>基本です。基本にして最後の手段です。クラーケンも障害物にひっかかるので、上手く誘導しましょう。</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/07.jpg" alt="07"></p><h2 id="C-加速パワーアップで振り切る"><a href="#C-加速パワーアップで振り切る" class="headerlink" title="C. 加速パワーアップで振り切る"></a><u>C. 加速パワーアップで振り切る</u></h2><p>加速パワーアップを利用することで一時的にクラーケンより早くサーフできます。<br>F キーで使用できますが、実は方向キーの下を 2 回押すことでも使用可能です。<br>ただ賢明な皆様はお気づきでしょう。スピードの出しすぎはリスクを伴います。<br>できる限り障害物にひっかけてしのぎましょう。</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/08.jpg" alt="08"></p><h2 id="D-犬シールド"><a href="#D-犬シールド" class="headerlink" title="D. 犬シールド"></a><u>D. 犬シールド</u></h2><p>犬かわいい、犬最強。<br>シールドが無くなる前に、新しい犬シールドを取得する犬シールドループを安定できるようになると、あなたはもう上級者です。<br>見かけたら最優先で助けに行きましょう。</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/09.jpg" alt="09"></p><p>ライフがシールドで覆われ、クラーケンや他のサーファーのアタックを三回まで防げます。</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/10.jpg" alt="10"></p><p>ただし犬シールドにも弱点はあり、障害物にあたってしまうと一発で剥がれます。<br>障害物からのクラーケンの即ゲームオーバーコンボは、幾度となく我々サポートチームを絶望に叩き落してきました。</p><h1 id="3-ゲームバランスが神ってる"><a href="#3-ゲームバランスが神ってる" class="headerlink" title="3. ゲームバランスが神ってる"></a>3. ゲームバランスが神ってる</h1><p>前項にて、クラーケン対策が最重要項目だとお伝えしてきました。 <strong>本当にそうでしょうか？</strong><br>最強名高い犬シールドの弱点は、障害物であることがわかりました。加速パワーアップの弱点も、障害物を避けづらくなる点にあります。<br>そしてクラーケンも障害物にひっかかって勝てません…我々は驚愕しました。 <strong>いつのまにか障害物が最強になってる！</strong></p><h2 id="障害物-gt-パワーアップアイテム-gt-クラーケン"><a href="#障害物-gt-パワーアップアイテム-gt-クラーケン" class="headerlink" title="障害物 &gt; パワーアップアイテム &gt; クラーケン"></a>障害物 &gt; パワーアップアイテム &gt; クラーケン</h2><p>方向キーの上を押せばその場で止まることができるので、止まりながら進めば障害物にあたる要素はありません。<br>しかししかしクラーケンの存在がそれをさせないため、 <strong>いかに上手く障害物を避けられるかという基本的なことが、</strong><br>ハイスコアに最も重要な要素であることに気づかされます。<br>この事実に気づいたとき、「あれこのゲーム、ひょっとしてレベルデザイナーついてるんじゃないか？」と震えました。</p><h1 id="4-障害物基礎"><a href="#4-障害物基礎" class="headerlink" title="4. 障害物基礎"></a>4. 障害物基礎</h1><p>ここにきて最強の座を得た障害物ですが、ある程度の規則をもって配置されているように見えます。<br>次のスクリーンショットは、障害物配置の一例です。</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/11.jpg" alt="11"></p><p>パワーアップアイテムも合わせて配置されており、この規則性を把握しておくことは非常に重要です。<br>実はここにも落とし穴があり、規則的に配置される障害物に加えて、ランダムに配置される障害物で構成されているようです。<br>ちょっと油断していると、</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/12.jpg" alt="12"></p><p>とか</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/13.jpg" alt="13"></p><p>とか、想定外の配置に心を揺さぶられてしまうので、油断は禁物です。</p><h1 id="5-最後に"><a href="#5-最後に" class="headerlink" title="5. 最後に"></a>5. 最後に</h1><p>これまでに述べた攻略方法を駆使した結果、2020/5/31 時点でサポートチームの最高得点は <strong>103523</strong> メートルです。</p><p><img src="/blog/internet-explorer-microsoft-edge/LetsSurfing-on-New-Edge/14.jpg" alt="14"></p><p>この記録を達成した際、たまたまそのチームメンバーが Microsoft Teams で画面共有しながら実況プレイしておりました。<br>100000 メートルを超えたあたりで、明らかに集中力が切れていたので周りから <strong>「まじめにやれ」、「集中しろ」</strong> という言葉を浴びせられていました。<br>その時点で、チーム内での最高記録を大幅に更新していたのにも関わらずです。<br>私も言いました。何事にも妥協せず本気で取り組む、それが私たちブラウザサポートチームなのです。<br>余談ですが、本記録達成後、スクリーンショットを添えて開発チームに賛辞のメールを送付したことは、言うまでもありません。  </p><p>皆様もネットサーフィンの合間にレッツ サーフィン！<br>今後ともよろしくお願いいたします。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;皆様、いい波乗ってますか？&lt;br&gt;2020 年 5 月、New Microsoft Edge 安定版 83 がリリースされました。&lt;br&gt;いくつかの機能追加や修正が加えられていますが、今回私たち Microsoft ブラウザサポートチームから紹介するのはこれ！&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="Microsoft Edge" scheme="https://jpdsi.github.io/blog/tags/Microsoft-Edge/"/>
    
    <category term="Chromium" scheme="https://jpdsi.github.io/blog/tags/Chromium/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark による New Microsoft Edge のトレース取得方法</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/New-Edge-Wireshark/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/New-Edge-Wireshark/</id>
    <published>2020-05-31T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.009Z</updated>
    
    <content type="html"><![CDATA[<p><font color="red">2020/8/7 更新 : ブラウザーのキャッシュが利用されてキャプチャーに記録されないことを避けるために、InPrivate ブラウズをご利用いただく方法をご案内していますが、InPrivate ブラウズをご利用いただけない場合には、ログ取得前にブラウザーのキャッシュをすべて消去してください。</font></p><p>こんにちは。Developer Support Internet チームです！</p><p>今回は、Chromium ベースの New Microsoft Edge で動作する Web アプリケーションにて、ネットワークに関連する問題が起こった際に、もしかしたら活用できるかもしれない Wireshark を用いたネットワークトレース取得方法の Tips をご紹介いたします。</p><p>今回は Wireshark を利用して New Microsoft Edge で動作するクライアントアプリ側にてトレースを取得します。<br>なお、本方法では HTTPS の通信をキャプチャすることも可能ですが、TLS のバージョンや暗号化の種類等によっては正常に復号できない可能性もあり、全ての HTTPS 通信を分析できるものではありません。</p><p>また、この方法については、Chromium ベースではない旧 Microsoft Edge や Internet Explorer では適用できませんのでご注意ください。<br>また弊社サポート製品ではございませんが、Google Chrome で動作するクライアントアプリのネットワークトレース取得にも現時点では適用可能な方法と存じます。</p><hr><h2 id="0-前提"><a href="#0-前提" class="headerlink" title="0. 前提"></a>0. 前提</h2><ul><li><p>再現手順が確立されており、Chromium ベースの New Microsoft Edge にてネットワークに関する事象が再現可能</p><p>新しい Microsoft Edge ブラウザーをダウンロード | Microsoft<br><a href="https://www.microsoft.com/ja-jp/edge?form=MA13DE&amp;OCID=MA13DE">https://www.microsoft.com/ja-jp/edge?form=MA13DE&amp;OCID=MA13DE</a></p></li><li><p>Wireshark がダウンロード済み</p><p>Download Wireshark<br><a href="https://www.wireshark.org/download.html">https://www.wireshark.org/download.html</a></p></li></ul><hr><h2 id="1-事前準備"><a href="#1-事前準備" class="headerlink" title="1. 事前準備"></a>1. 事前準備</h2><ol><li><p>この Blog の記事の手順や再現するアプリの URL 等をノート帳 (Notepad) で開けるテキストファイル (.txt) などにコピーし開いておきます。</p></li><li><p>New Microsoft Edge や Google Chrome を含めて、全てのブラウザを閉じます。</p></li><li><p>ブラウザ以外のアプリも上記の 0 の手順のテキストファイル以外はすべて閉じます。</p></li><li><p>エクスプローラーにて、キーを保存する任意のフォルダ (C:\tmp) 等を作成しておきます。</p></li><li><p>コマンドプロンプトを開き、以下のコマンドで上記で作成した任意のフォルダ (ここでは C:\tmp と仮定) に空の新規ファイルを作成または既に存在する場合は同ファイルを空に上書きします。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &gt; C:\tmp\ssl.txt</span><br></pre></td></tr></table></figure><br /><br /><hr><h2 id="2-ユーザー環境変数の設定"><a href="#2-ユーザー環境変数の設定" class="headerlink" title="2. ユーザー環境変数の設定"></a>2. ユーザー環境変数の設定</h2><p>ツールバーの検索等から “環境変数を編集” を開き、ユーザー環境変数の “新規” ボタンを<br>クリックし、”ユーザー変数の編集” にて、以下のように、ユーザー変数の環境変数を設定します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">変数名 : SSLKEYLOGFILE</span><br><span class="line">変数値 : C:\tmp\ssl.txt</span><br></pre></td></tr></table></figure><br /><br /><p><img src="/blog/internet-explorer-microsoft-edge/New-Edge-Wireshark/sslkeylogfile.png" alt="sslkeylogfile"></p><br /><br /><hr><h2 id="3-Wireshark-の準備"><a href="#3-Wireshark-の準備" class="headerlink" title="3. Wireshark の準備"></a>3. Wireshark の準備</h2><ol><li><p>Wireshark を開きます。</p></li><li><p>キャプチャーしたいインターフェース (イーサネット や wifi、vEthernet など) を選択します。</p></li><li><p>左上の赤い四角ボタンを押し、一度、停止しておきます。</p></li></ol><p><img src="/blog/internet-explorer-microsoft-edge/New-Edge-Wireshark/stop.png" alt="STOP"></p><br /><br /><hr><h2 id="4-New-Microsoft-Edge-による再現とキャプチャ"><a href="#4-New-Microsoft-Edge-による再現とキャプチャ" class="headerlink" title="4. New Microsoft Edge による再現とキャプチャ"></a>4. New Microsoft Edge による再現とキャプチャ</h2><p>4-1. New Microsoft Edge を InPrivate ウィンドウで開く。<br>(タスクバー等の Edge アイコンを右クリックで “新しい InPrivate ウィンドウ” で開けます)<br>※ InPrivate ブラウズをご利用いただけない場合には、ログ取得前にブラウザーのキャッシュをすべて消去してください。手順は後述の補足をご覧ください。</p><p>4-2. Wireshark にて、左上の青いシャークの形をしたボタンを押してキャプチャを開始する。<br>(保存に関するダイアログが出た場合、”保存せずに続ける” を押しキャプチャを開始する)</p><p><img src="/blog/internet-explorer-microsoft-edge/New-Edge-Wireshark/start.png" alt="START"></p><br /><p>4-3. New Microsoft Edge にて該当のサイトを開き、素早く事象の再現を行う。</p><p>4-4. 再現後、すぐに Wireshark に戻り、左上の赤い四角のボタンを再度押し、停止する。</p><hr><h2 id="5-復号"><a href="#5-復号" class="headerlink" title="5. 復号"></a>5. 復号</h2><p>5-1. Wireshark 上部の [編集] タブを押し、[設定] ボタンを押す。</p><p>5-2. 左側の [Protocols] 内の [TLS] を選択する。</p><p>5-3. [(Pre)-Master-Secret log filename] の [Browse] ボタンを選択し、C:\tmp\ssl.txt を選択する。</p><br /><p><img src="/blog/internet-explorer-microsoft-edge/New-Edge-Wireshark/premaster.png" alt="premaster"></p><br /><br /><p>5-4. [OK] ボタンを押し、復号し、キャプチャした内容を確認します。<br>(これを行うことで、全てではないものの、HTTPS の通信が復号されたキャプチャを見ることが可能となります)</p><p>イメージ : </p><p><img src="/blog/internet-explorer-microsoft-edge/New-Edge-Wireshark/wireshark.png" alt="wireshark"></p><br /><br /><p>5-5. 必要に応じて、Wireshark 上部の [ファイル] タブを押し、[保存] ボタンから .pcapng 形式で保存します。</p><p>5-6. もし私共サポートから本 Blog による情報採取をご依頼された場合は、.pcapng ファイルと C:\tmp\ssl.txt の 2 つ両方とも提供します。</p><p>※ なお、Wireshark 自体のツールに関するトラブルシューティングや操作方法等のご質問は 3 rd party 製品となる為、Microsoft のサポートでは承ることができませんのでご了承ください。</p><hr><h2 id="6-後片付け"><a href="#6-後片付け" class="headerlink" title="6. 後片付け"></a>6. 後片付け</h2><p>2 で追加した環境変数 SSLKEYLOGFILE を削除します。</p><hr><h2 id="補足-ブラウザーのキャッシュ消去について"><a href="#補足-ブラウザーのキャッシュ消去について" class="headerlink" title="補足 : ブラウザーのキャッシュ消去について"></a>補足 : ブラウザーのキャッシュ消去について</h2><ol><li><p>New Microsoft Edge にて edge://settings/clearBrowserData を開きます。</p></li><li><p>以下のように設定し、[今すぐクリア] ボタンをクリックします。</p></li></ol><p><img src="/blog/internet-explorer-microsoft-edge/New-Edge-Wireshark/clearcache.png" alt="clearcache"></p><hr><h2 id="補足-netsh-でのトレース取得方法"><a href="#補足-netsh-でのトレース取得方法" class="headerlink" title="補足 : netsh でのトレース取得方法"></a>補足 : netsh でのトレース取得方法</h2><p>New Microsoft Edge の SSLKEYLOGFILE を用いたネットワークトレースの復号について、ネットワークトレースを取得するツール自体は Wireshark ではなく、netsh でも取得は可能です。</p><p>私共サポートから  netsh を用いた New Microsoft Edge のトレース取得をご案内することもございますため、以下、簡単にその方法についても記載いたします。</p><ol><li><p>上部の “1. 事前準備” を行います。</p></li><li><p>“2. ユーザー環境変数の設定” を行います。</p></li><li><p>“Wireshark の準備”　は実施せずにスキップ</p></li><li><p>“4. New Microsoft Edge による再現とキャプチャ” は以下の手順で実施します (上部の 5 はスキップします)</p></li></ol><p>4-1. New Microsoft Edge を InPrivate ウィンドウで開く。<br>(タスクバー等の Edge アイコンを右クリックで “新しい InPrivate ウィンドウ” で開けます)<br>※ InPrivate ブラウズをご利用いただけない場合には、ログ取得前にブラウザーのキャッシュをすべて消去してください。手順は上述の補足をご覧ください。</p><p>4-2. 管理者権限でコマンド プロンプトを開き、次のコマンドを実行し、キャプチャを開始します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　netsh trace start capture=yes maxSize=2000MB</span><br></pre></td></tr></table></figure><p>4-3. New Microsoft Edge にて該当のサイトを開き、素早く事象の再現を行う。</p><p>4-4. 次のコマンドを実行して、キャプチャを停止します (しばらく時間がかかります)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　netsh trace stop</span><br></pre></td></tr></table></figure><p>4-5. もし私共サポートから本 Blog による New Microsoft Edge の netsh の情報採取をご依頼された場合は、トレースの .etl ファイルと .cab ファイルと C:\tmp\ssl.txt の 3 つ両方とも提供します。</p><p>(参考) 以下の etl2pcapng を利用すると、.etl を Wireshark で開ける .pcapng　形式に変換できます。</p><p>etl2pcapng<br><a href="https://github.com/microsoft/etl2pcapng">https://github.com/microsoft/etl2pcapng</a></p><p>コマンド例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etl2pcapng in.etl out.pcapng</span><br></pre></td></tr></table></figure><hr><hr><h2 id="補足２-pktmon-でのトレース取得方法"><a href="#補足２-pktmon-でのトレース取得方法" class="headerlink" title="補足２ : pktmon でのトレース取得方法"></a>補足２ : pktmon でのトレース取得方法</h2><p>Windows 10 の 1809 から pktmon が搭載されており、上述の netsh と同様にネットワークトレースを取ることができます。</p><ol><li><p>上部の “1. 事前準備” を行います。</p></li><li><p>“2. ユーザー環境変数の設定” を行います。</p></li><li><p>“Wireshark の準備”　は実施せずにスキップ</p></li><li><p>“4. New Microsoft Edge による再現とキャプチャ” は以下の手順で実施します (上部の 5 はスキップします)</p></li></ol><p>4-1. New Microsoft Edge を InPrivate ウィンドウで開く。<br>(タスクバー等の Edge アイコンを右クリックで “新しい InPrivate ウィンドウ” で開けます)<br>※ InPrivate ブラウズをご利用いただけない場合には、ログ取得前にブラウザーのキャッシュをすべて消去してください。手順は上述の補足をご覧ください。</p><p>4-2. 管理者権限でコマンド プロンプトを開き、次のコマンドを実行し、キャプチャを開始します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　pktmon start --etw -p 0</span><br></pre></td></tr></table></figure><p>4-3. New Microsoft Edge にて該当のサイトを開き、素早く事象の再現を行う。</p><p>4-4. 次のコマンドを実行して、キャプチャを停止します</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　pktmon stop</span><br></pre></td></tr></table></figure><p>4-5. もし私共サポートから本 Blog による New Microsoft Edge の pktmon の情報採取をご依頼された場合は、トレースの .etl ファイルと C:\tmp\ssl.txt の両方とも提供します。</p><p>(参考) 以下のコマンドを実行すると、Wireshark で開ける .pcapng　形式に変換できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pktmon pcapng PktMon.etl -o PktMon.pcapng</span><br></pre></td></tr></table></figure><hr><p>以上で今回のご紹介は終了です。</p><p>私共では様々なお客様のお問い合わせの内容や状況等に合わせて、お問い合わせ後に、Fiddler や netsh、Wireshark によるトレース、その他の情報等のご提供をお願いしております。また、多くの場合ではクライアント側のキャプチャだけでは原因究明が出来ないことも多々あり、その場合はサーバー側や中間機器等でも情報を採取いただく必要もございます。</p><p>今回はその中のあくまで 1 つである Wireshark を用いて、クライアント側のブラウザ New Microsoft Edge で動作する　Web アプリに関するネットワークトレースの取得方法をご紹介いたしました。</p><p>今回は以上です。それでは、また次回！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;font color=&quot;red&quot;&gt;2020/8/7 更新 : ブラウザーのキャッシュが利用されてキャプチャーに記録されないことを避けるために、InPrivate ブラウズをご利用いただく方法をご案内していますが、InPrivate ブラウズをご利用いただけない場合には、ロ</summary>
      
    
    
    
    
    <category term="ログ採取" scheme="https://jpdsi.github.io/blog/tags/%E3%83%AD%E3%82%B0%E6%8E%A1%E5%8F%96/"/>
    
    <category term="Microsoft Edge" scheme="https://jpdsi.github.io/blog/tags/Microsoft-Edge/"/>
    
    <category term="Chromium" scheme="https://jpdsi.github.io/blog/tags/Chromium/"/>
    
    <category term="Wireshark" scheme="https://jpdsi.github.io/blog/tags/Wireshark/"/>
    
  </entry>
  
  <entry>
    <title>新しいバージョンの Microsoft Edge の &quot;IE モード&quot; について</title>
    <link href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/IEMode/"/>
    <id>https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/IEMode/</id>
    <published>2020-05-28T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.005Z</updated>
    
    <content type="html"><![CDATA[<p>更新履歴:<br>2020/05/29 新規<br>2021/05/18 更新: IE モードのよくあるご質問の記事へのリンクを追加しました。</p><hr><p>こんにちは。今回は IE モードを紹介します。</p><p>IE モードは、一言で表すと『Microsoft Edge の画面の中で Internet Explorer が動く』というものです。</p><p>構成方法などを含めた詳細は以下のドキュメントをご覧いただければと思いますが、適切に制御することで、ユーザーが Internet Explorer と Microsoft Edge を意識的に使い分ける操作をせずに、Internet Explorer を必要とする古い技術で作られた Web アプリケーションを、Microsoft Edge の中でシームレスに閲覧できるようになります。</p><p>IE モードの登場により『Internet Explorer を単独で動かすのではなく、IE/Edge どちらにも対応したブラウザー環境を提供する』ことから『今後は Internet Explorer ではなく、Microsoft Edge で動作する Web アプリケーションを用意する』というように段階的な移行を進めやすくなりました。<br>ぜひ活用していただければと思います。</p><p>IE モードの概要<br><a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode">https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode</a></p><p>IE モード ポリシーの構成<br><a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-policies">https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-policies</a></p><p>エンタープライズ モード サイト リストでのサイトの構成<br><a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-sitelist">https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-sitelist</a></p><p>IE モードに関する FAQ<br><a href="https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-faq">https://docs.microsoft.com/ja-jp/deployedge/edge-ie-mode-faq</a></p><hr><p>以前ここに載せていたニュートラルサイトの話は、以下の記事に移動しました。</p><p>IE モードのよくあるご質問<br><a href="https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/ie-mode-faq/">https://jpdsi.github.io/blog/internet-explorer-microsoft-edge/ie-mode-faq/</a></p><p>何か困ったことがありましたら、私たちサポート チームまでお問い合わせください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;更新履歴:&lt;br&gt;2020/05/29 新規&lt;br&gt;2021/05/18 更新: IE モードのよくあるご質問の記事へのリンクを追加しました。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;こんにちは。今回は IE モードを紹介します。&lt;/p&gt;
&lt;p&gt;IE モードは、一言で表すと『Microso</summary>
      
    
    
    
    
    <category term="Microsoft Edge" scheme="https://jpdsi.github.io/blog/tags/Microsoft-Edge/"/>
    
    <category term="IE モード" scheme="https://jpdsi.github.io/blog/tags/IE-%E3%83%A2%E3%83%BC%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>WCF のバインディング処理にて競合状態により起きる問題</title>
    <link href="https://jpdsi.github.io/blog/web-apps/wcf-indexoutofrangeexception/"/>
    <id>https://jpdsi.github.io/blog/web-apps/wcf-indexoutofrangeexception/</id>
    <published>2020-05-26T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:51.037Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。IIS サポート チームです。</p><p>今回は WCF のバインディング処理にて競合状態により起きる問題についてご説明いたします。<br>1 つのプロセス (IIS でホストしている場合は同一アプリケーションプール) で複数の WCF のバインディングをご利用で、以下の例外とスタックトレースが記録される場合がございます。<br>これは下記コミュニティより報告があり、調査が進められた結果、弊社製品の問題と判断され、修正が検討されています。(2020/5/27 時点)</p><p>IndexOutOfRangeException in MessageSecurityOverHttpElement when creating WCF client from service reference<br><a href="https://developercommunity.visualstudio.com/content/problem/692599/indexoutofrangeexception-in-messagesecurityoverhtt.html">https://developercommunity.visualstudio.com/content/problem/692599/indexoutofrangeexception-in-messagesecurityoverhtt.html</a></p><h2 id="例外-例外メッセージ"><a href="#例外-例外メッセージ" class="headerlink" title="例外/例外メッセージ"></a>例外/例外メッセージ</h2><p>System.IndexOutOfRangeException/インデックスが配列の境界外です。</p><h2 id="スタックトレース"><a href="#スタックトレース" class="headerlink" title="スタックトレース"></a>スタックトレース</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">場所 System.Collections.ArrayList.ArrayListEnumeratorSimple.MoveNext()</span><br><span class="line">場所 System.Configuration.PropertyInformationCollection..ctor(ConfigurationElement thisElement)</span><br><span class="line">場所 System.ServiceModel.Configuration.MessageSecurityOverHttpElement.ApplyConfiguration(MessageSecurityOverHttp security)</span><br><span class="line">場所 System.ServiceModel.Configuration.NonDualMessageSecurityOverHttpElement.ApplyConfiguration(NonDualMessageSecurityOverHttp security)</span><br><span class="line">場所 System.ServiceModel.Description.ConfigLoader.LookupBinding(String bindingSectionName, String configurationName, BindingCollectionElement bindingCollectionElement, Binding defaultBinding)</span><br><span class="line">場所 System.ServiceModel.Description.ConfigLoader.LookupBinding(String bindingSectionName, String configurationName, ContextInformation context)</span><br><span class="line">場所 System.ServiceModel.Description.ConfigLoader.LoadChannelBehaviors(ServiceEndpoint serviceEndpoint, String configurationName)</span><br><span class="line">場所 System.ServiceModel.ChannelFactory.ApplyConfiguration(String configurationName, Configuration configuration)</span><br><span class="line">場所 System.ServiceModel.ChannelFactory.InitializeEndpoint(String configurationName, EndpointAddress address)</span><br><span class="line">場所 System.ServiceModel.ChannelFactory`1..ctor(String endpointConfigurationName, EndpointAddress remoteAddress)</span><br><span class="line">場所 System.ServiceModel.ConfigurationEndpointTrait`1.CreateSimplexFactory()</span><br><span class="line">場所 System.ServiceModel.ClientBase`1.CreateChannelFactoryRef(EndpointTrait`1 endpointTrait)</span><br><span class="line">場所 System.ServiceModel.ClientBase`1.InitializeChannelFactoryRef()</span><br></pre></td></tr></table></figure><p>回避策、対処方法としては以下の 2 点ございます。</p><ol><li>WCF のアプリケーションにおいてクライアントのクラスをインスタンス化を複数同時に発生しないよう排他制御を行っていただく</li><li>プロセスの再起動を行う (IIS でホストしている場合にはアプリケーションプールのリサイクル) </li></ol><p>ご不便をおかけしており誠に恐れ入りますが、何卒よろしくお願いいたします。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。IIS サポート チームです。&lt;/p&gt;
&lt;p&gt;今回は WCF のバインディング処理にて競合状態により起きる問題についてご説明いたします。&lt;br&gt;1 つのプロセス (IIS でホストしている場合は同一アプリケーションプール) で複数の WCF のバインディングをご</summary>
      
    
    
    
    
    <category term="Internet Information Services" scheme="https://jpdsi.github.io/blog/tags/Internet-Information-Services/"/>
    
    <category term="WCF" scheme="https://jpdsi.github.io/blog/tags/WCF/"/>
    
  </entry>
  
  <entry>
    <title>Azure Bot Service の Portal 上の事象の調査に必要な情報</title>
    <link href="https://jpdsi.github.io/blog/azure-bot-service/bot-portal-log-collection/"/>
    <id>https://jpdsi.github.io/blog/azure-bot-service/bot-portal-log-collection/</id>
    <published>2020-05-10T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:50.985Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Bot Service サポート チームです！  </p><p>以前 Azure Bot Service (Web App Bot もしくは Bot Channels Registration) のボットの動作に関する情報採取について以下をご紹介しましたが、今回は Azure Bot Service をご利用する際に、Azure Portal 上で問題が起こった際に必要となることが多い再現手順と通信ログの情報採取をご紹介いたします。</p><p>現象により必要な情報は異なりますが、今回はほとんどの Azure Bot Service の Portal 上の問題に関する調査に対して有効な情報について以下にご紹介いたします。</p><p>例えば、以下のような問題があげられます。</p><ul><li>Azure Portal 上にて Azure Bot Service のリソース作成時にエラーがでる</li><li>Azure Portal 上の Azure Bot Service リソースのあるパネルのページのみ正常に開けない</li></ul><br /><hr><h2 id="0-前置き"><a href="#0-前置き" class="headerlink" title="0. 前置き"></a>0. 前置き</h2><p>Azure Bot Service 作成時に出力されるエラーとして例えば以下のようなものがあり、<br>それぞれ該当する回避策を実施することで回避できる可能性がございます。<br>もし該当のエラーが出ているような場合にはまずは以下をお試しください。</p><h4 id="パターン-1-Azure-Bot-Service-作成時に-“Authorization-RequestDenied”-エラー"><a href="#パターン-1-Azure-Bot-Service-作成時に-“Authorization-RequestDenied”-エラー" class="headerlink" title="パターン 1 : Azure Bot Service 作成時に “Authorization_RequestDenied” エラー"></a>パターン 1 : Azure Bot Service 作成時に “Authorization_RequestDenied” エラー</h4><p>Azure Bot Service 作成時に “Authorization_RequestDenied” エラー が出ている<br>場合は、以下の事象に該当している可能性が高いので、下記情報をまずはご参照ください。</p><p>参考：Bot 作成時に “Authorization_RequestDenied” エラーが出力される<br><a href="https://social.msdn.microsoft.com/Forums/en-US/eecc490d-4d0a-4e8d-bc90-3f927ebe78c6/bot-authorizationrequestdenied-?forum=azurebotsupportteamja">https://social.msdn.microsoft.com/Forums/en-US/eecc490d-4d0a-4e8d-bc90-3f927ebe78c6/bot-authorizationrequestdenied-?forum=azurebotsupportteamja</a></p><p>参考 : ボットを作成するときに Authorization_RequestDenied という例外が発生するのはなぜですか。<br><a href="https://docs.microsoft.com/ja-jp/azure/bot-service/bot-service-troubleshoot-general-problems?view=azure-bot-service-4.0#why-do-i-get-an-authorization_requestdenied-exception-when-creating-a-bot">https://docs.microsoft.com/ja-jp/azure/bot-service/bot-service-troubleshoot-general-problems?view=azure-bot-service-4.0#why-do-i-get-an-authorization_requestdenied-exception-when-creating-a-bot</a></p><h4 id="パターン-2-Azure-Bot-Service-作成時に-“Can’t-register-resource-provider-‘Microsoft-BotService’”-エラー"><a href="#パターン-2-Azure-Bot-Service-作成時に-“Can’t-register-resource-provider-‘Microsoft-BotService’”-エラー" class="headerlink" title="パターン 2 : Azure Bot Service 作成時に “Can’t register resource provider ‘Microsoft.BotService’” エラー"></a>パターン 2 : Azure Bot Service 作成時に “Can’t register resource provider ‘Microsoft.BotService’” エラー</h4><p>Azure Bot Service 作成時に “Can’t register resource provider ‘Microsoft.BotService” エラー が出ている場合は、<br>下記サイトを参考に Microsoft.BotService のリソースプロバイダーのご確認と登録を実施ください。</p><p>参考：リソース プロバイダーの登録エラーの解決<br><a href="https://docs.microsoft.com/ja-jp/azure/azure-resource-manager/templates/error-register-resource-provider#solution-3---azure-portal">https://docs.microsoft.com/ja-jp/azure/azure-resource-manager/templates/error-register-resource-provider#solution-3---azure-portal</a></p><hr><h2 id="1-事象解消のために考えうる回避案"><a href="#1-事象解消のために考えうる回避案" class="headerlink" title="1. 事象解消のために考えうる回避案"></a>1. 事象解消のために考えうる回避案</h2><p>上記 0 に該当しない場合、もしくはそれぞれの回避策を実施しても解決しない場合、<br>本事象が一時的な問題の可能性もございますので、以下をそれぞれ実施頂き、<br>いずれかで事象が解消するかどうか、まずは以下の手順でご確認ください。</p><h3 id="確認事項-1-ブラウザのシークレットモードで確認"><a href="#確認事項-1-ブラウザのシークレットモードで確認" class="headerlink" title="確認事項 1 :ブラウザのシークレットモードで確認"></a>確認事項 1 :ブラウザのシークレットモードで確認</h3><p>一旦開いているブラウザ等を閉じ、ブラウザ (Google Chrome や Microsoft Edge など) のシークレットウィンドウにて<br>Azure Portal を新たに開き、該当の再現手順をあらためて実施した際に事象が解消するかご確認ください。</p><h3 id="確認事項-2-ポータルの言語設定を英語に変更し、確認"><a href="#確認事項-2-ポータルの言語設定を英語に変更し、確認" class="headerlink" title="確認事項 2 : ポータルの言語設定を英語に変更し、確認"></a>確認事項 2 : ポータルの言語設定を英語に変更し、確認</h3><p>上記のシークレットモードのまま、Azure Portal を開き、右上の設定アイコンの以下の操作で言語を<br>[English] に変更し、該当の再現手順をあらためて実施した際に事象が解消するかご確認ください。 </p><h3 id="確認事項-3-時間をおいて確認"><a href="#確認事項-3-時間をおいて確認" class="headerlink" title="確認事項 3 : 時間をおいて確認"></a>確認事項 3 : 時間をおいて確認</h3><p>時間を一定時間空けてから、該当の再現手順をあらためて実施した際に事象が解消するかご確認ください。 </p><p>もし上記の 3 つでも正常でない場合、以下の情報を採取しそれを基に調査方針を検討することが可能です。<br>主に、以下の手順ではクライアント側の HTTP 通信の応答と、具体的な再現時の操作状況を確認いたします。</p><hr><h2 id="情報採取-Fiddler-ログ、問題ステップ記録ツール-PSR-のログ"><a href="#情報採取-Fiddler-ログ、問題ステップ記録ツール-PSR-のログ" class="headerlink" title="情報採取 : Fiddler ログ、問題ステップ記録ツール (PSR) のログ"></a>情報採取 : Fiddler ログ、問題ステップ記録ツール (PSR) のログ</h2><p>弊社サポート対象外のツールではございますが、 Fiddler というツールを利用することで HTTPS の通信を含めたキャプチャを取得することが可能です。<br>本ツールをご利用いただくには、対象の端末に本ツールをインストールしていただく必要があります。<br>以下に、HTTPS 通信を含めたネットワークアクセスのキャプチャ手順をご案内いたします。</p><h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><h4 id="1-Fiddler-のダウンロード"><a href="#1-Fiddler-のダウンロード" class="headerlink" title="1. Fiddler のダウンロード"></a>1. Fiddler のダウンロード</h4><p>以下のサイトから、Fiddler4 をダウンロードし、トレースを取得する端末にインストールします。</p><p>Download Fiddler<br><a href="https://www.telerik.com/download/fiddler/fiddler4">https://www.telerik.com/download/fiddler/fiddler4</a></p><h4 id="2-Portal-上の言語の変更"><a href="#2-Portal-上の言語の変更" class="headerlink" title="2. Portal 上の言語の変更"></a>2. Portal 上の言語の変更</h4><p>ポータルの言語設定を上記の確認事項 2 のように、言語設定を [英語 (English)]に変更します。<br>確認事項 1 のように、Chrome などのブラウザの [シークレットモード] で Azure Portal (<a href="https://portal.azure.com/">https://portal.azure.com/</a>) を再度新たに開きます。<br>※ まだ再現手順は行わずに、Azure Portal 上のトップページのまま、以下の手順 3 を実施します。</p><h3 id="情報採取"><a href="#情報採取" class="headerlink" title="情報採取"></a>情報採取</h3><h4 id="3-PSR-採取開始"><a href="#3-PSR-採取開始" class="headerlink" title="3. PSR 採取開始"></a>3. PSR 採取開始</h4><p>Windows 標準の画面キャプチャソフトである問題ステップ記録ツール (PSR) を起動します。</p><p>3-1.クライアントにて、Win + R キーを押し、[ファイル名を指定して実行] より “psr” と入力し、[OK] をクリックします。</p><p>3-2. [ステップ記録ツール] が起動しましたら、右端の ▼ をクリックし、[設定] をクリックします。</p><p>3-3. [保存する最新の取り込み画像数] を “25” から “150” に変更し [OK] をクリックします。</p><p>3-4. [記録の開始] をクリックします。</p><h4 id="4-Fiddler-ログの採取と-PSR-の採取終了"><a href="#4-Fiddler-ログの採取と-PSR-の採取終了" class="headerlink" title="4. Fiddler ログの採取と PSR の採取終了"></a>4. Fiddler ログの採取と PSR の採取終了</h4><p>4-1. 接続元クライアントにて、Fiddler を起動します。</p><p>4-2. Fiddler のメニュー バーから [Tools] - [Fiddler Options] を選択します。</p><p>4-3. HTTPS タブをクリックし、”Capture HTTPS CONNECTS” および “Decrypt HTTPS traffic” のチェック ボックスをオンにし、OK ボタンをクリックし、Fiddler Options を閉じます。</p><ul><li>“Decrypt HTTPS traffic” のチェック ボックスをオンにすることで、以下の警告が表示されますので、Yes ボタンをクリックします。<br>“Fiddler generates a unique root CA certificate to intercept HTTPS traffic. You may choose to have Windows trust this root certificate to avoid security warnings about the untrusted root certificate. You should ONLY click ‘Yes’ on a computer used exclusively for TEST purposes.”</li><li>上記警告で Yes を選択すると、セキュリティ警告が表示されますので、”はい” を選択します。<br>これにより、個人ストア、および信頼されたルート証明機関ストアに発行者が “DO_NOT_TRUST_FiddlerRoot” である証明書が追加されます。</li></ul><p>4-4. 画面右側にある Filters - User Filter がオフになっていることを確認します。</p><p>4-5. Fiddler のキャプチャ画面にアクセスがトレースされていることを確認してください。</p><p>4-6. Azure Portal 上で現象を再現させます。</p><p>4-7. 現象やエラー等を確認できましたら、Fiddler のメニュー バーから [File] - [Save] - [All Sessions] を選択し、.saz 形式でログを保存します。</p><p>4-8. PSR の画面で [記録の停止] をクリックします。</p><p>4-9. PSR の画面で [保存] をクリックし、ファイルの保存場所、ファイル名を指定し、[保存] をクリックします。</p><p>4-10. Fiddler を終了します。</p><p>4-11. PSR と Fiddler で採取した情報を基に調査を行います。</p><h4 id="5-Fiddler-アンインストールについて-任意"><a href="#5-Fiddler-アンインストールについて-任意" class="headerlink" title="5. Fiddler アンインストールについて (任意)"></a>5. Fiddler アンインストールについて (任意)</h4><p>アンインストールについては下記をご参考にいただければと存じます。</p><p>5-1. コントロール パネルから [プログラムと機能] を選択します。</p><p>5-2. Fiddler をダブル クリックし、”Uninstall” ボタンをクリックしアン インストールします。</p><p>5-3. [スタート] - [検索の開始] に certmgr.msc と入力し、Enter キーを押下します。</p><p>5-4. 証明書管理スナップインの左ペインから、[個人] - [証明書] を展開し、右ペインから発行者が “DO_NOT_TRUST_FiddlerRoot” となっている全ての証明書に関して、証明書を右クリックし、”削除” を選択し、証明書を削除します。</p><p>5-5. 証明書管理スナップインの左ペインから、[信頼されたルート証明機関] - [証明書] を展開し、右ペインから発行者が “DO_NOT_TRUST_FiddlerRoot” となっている全ての証明書に関して、証明書を右クリックし、”削除” を選択し、証明書を削除します。</p><p>※ なお、Fiddler 自体のツールに関するトラブルシューティングや操作方法等のご質問は 3 rd party 製品となる為、本 Azure サポートでは承ることができませんのでご了承ください。</p><br /><p>上記を基に私共サポートにて Azure Bot Service リソースにおける Azure Portal 上の事象に関して調査を承ることが可能です。</p><p>なお、状況に応じて、例えば Azure Bot Service のそのほかの情報や詳細な画面キャプチャなど追加の情報が必要になることも多々ございますが、上記をまず確認した上で、より詳細な調査に向けて調査方針や追加の情報採取を検討していくことが可能となります。</p><p>今回は以上です。それでは、また次回！</p><br />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。Azure Bot Service サポート チームです！  &lt;/p&gt;
&lt;p&gt;以前 Azure Bot Service (Web App Bot もしくは Bot Channels Registration) のボットの動作に関する情報採取について以下をご紹介し</summary>
      
    
    
    
    
    <category term="Azure Bot Service" scheme="https://jpdsi.github.io/blog/tags/Azure-Bot-Service/"/>
    
    <category term="ログ採取" scheme="https://jpdsi.github.io/blog/tags/%E3%83%AD%E3%82%B0%E6%8E%A1%E5%8F%96/"/>
    
    <category term="Azure Portal" scheme="https://jpdsi.github.io/blog/tags/Azure-Portal/"/>
    
  </entry>
  
  <entry>
    <title>Web App Bot の常時接続について</title>
    <link href="https://jpdsi.github.io/blog/azure-bot-service/bot-alwayson/"/>
    <id>https://jpdsi.github.io/blog/azure-bot-service/bot-alwayson/</id>
    <published>2020-04-22T15:00:00.000Z</published>
    <updated>2021-05-21T07:37:50.981Z</updated>
    
    <content type="html"><![CDATA[<p>※ これまで Azure Bot Service Support Team Blog にて公開していた記事を移しました。</p><p>こんにちは。Azure Bot Service Support Team です。</p><p>Web App Bot をご利用の際に、ボットに ”暫く経ってからアクセスした際にレスポンスが遅いように感じる” といったような事がある場合があります。今回は、そんな時に事象解消の手助けができるような方法についてご紹介します。</p><p>まずはなぜ “暫く経ってからアクセスした際にレスポンスが遅いように感じる” といったことが起こるのかについて、下記にて記載させていただきます。</p><br /><hr><h2 id="考えられる原因について"><a href="#考えられる原因について" class="headerlink" title="考えられる原因について"></a>考えられる原因について</h2><p>まず、Web App Bot については、Bot アプリケーションを Azure App Service 上にホストするものです。</p><p>なお、Web App Bot などの Azure Bot Service の種類に関しては下記の前回の Blog 記事をご参照ください。</p><p>参考 : Azure Bot Service サポートチーム - Azure Bot Service の種類について<br><a href="https://social.msdn.microsoft.com/Forums/ja-JP/74ec7be1-10f9-4faf-af31-89c0d36cec6f/azure-bot-service-?forum=azurebotsupportteamja">https://social.msdn.microsoft.com/Forums/ja-JP/74ec7be1-10f9-4faf-af31-89c0d36cec6f/azure-bot-service-?forum=azurebotsupportteamja</a></p><p>ホストする Azure App Service では一定期間アイドル状態になるとリソース節約のために、Web アプリは自動的にアンロードされるような機能が備わっております。</p><p>この機能により、システムリソースを節約できる一方で、Web アプリがアンロードされた後の最初の要求への応答が結果的に長くなります。</p><p>Web App Bot をご利用の際に ”暫く経ってからアクセスした際にレスポンスが</p><p>遅いように感じる” といった事象の原因の多くが上記の機能の影響と考えられます。</p><hr><h2 id="考えられる解決法について"><a href="#考えられる解決法について" class="headerlink" title="考えられる解決法について"></a>考えられる解決法について</h2><p>上記の機能を無効にするためには Bot をホストする Azure App Service で [常時接続] をオンにします。</p><p>具体的には、下記が [常時接続] の設定を変更する手順となります。</p><ol><li>Azure Portal で、ホストする Azure App Service のリソースに移動します。</li><li>[構成] を選択し、上部の [全般設定] タブを選択します。</li><li>[常時接続] の [On] (オン) を選択し、保存します。</li></ol><p>参考 : Azure での Web アプリのアプリケーションパフォーマンスに関するよくあるご質問 – 常時接続<br><a href="https://docs.microsoft.com/ja-jp/azure/app-service/faq-availability-performance-application-issues#how-do-i-decrease-the-response-time-for-the-first-request-after-idle-time">https://docs.microsoft.com/ja-jp/azure/app-service/faq-availability-performance-application-issues#how-do-i-decrease-the-response-time-for-the-first-request-after-idle-time</a></p><p>参考 : Azure Bot Service - 一般的な問題のトラブルシューティング – 常時接続<br><a href="https://docs.microsoft.com/ja-jp/azure/bot-service/bot-service-troubleshoot-general-problems?view=azure-bot-service-4.0#my-bot-is-slow-to-respond-to-the-first-message-it-receives-how-can-i-make-it-faster">https://docs.microsoft.com/ja-jp/azure/bot-service/bot-service-troubleshoot-general-problems?view=azure-bot-service-4.0#my-bot-is-slow-to-respond-to-the-first-message-it-receives-how-can-i-make-it-faster</a></p><p>なお、利用する App Service Plan によって制限があり、その注意点についても下記にて記載いたします。</p><h3 id="上記設定の変更に必要な-App-Service-Plan"><a href="#上記設定の変更に必要な-App-Service-Plan" class="headerlink" title="上記設定の変更に必要な App Service Plan"></a>上記設定の変更に必要な App Service Plan</h3><p>2019 年 9 月現在、上記の設定を変更するには、Basic 以上の App Service Plan が必要となります。</p><p>参考 : App Service プラン<br><a href="https://azure.microsoft.com/ja-jp/pricing/details/app-service/plans/">https://azure.microsoft.com/ja-jp/pricing/details/app-service/plans/</a></p><p>Free や Shared の App Service Plan をご利用の場合には、Basic 以上のプランへのスケールアップをご検討ください。</p><p>参考 : Azure でのアプリのスケールアップ<br><a href="https://docs.microsoft.com/ja-jp/azure/app-service/web-sites-scale">https://docs.microsoft.com/ja-jp/azure/app-service/web-sites-scale</a></p><p>なお、Free プラン等のプランをご利用の場合は設定部分が既定のオフのままグレーアウトされます。</p><p><img src="/blog/azure-bot-service/bot-alwayson/lowplan.png" alt="lowplan"></p><hr><h2 id="QnA-Maker-を連携してご利用の場合"><a href="#QnA-Maker-を連携してご利用の場合" class="headerlink" title="QnA Maker を連携してご利用の場合"></a>QnA Maker を連携してご利用の場合</h2><p>Web App Bot と QnA Maker を連携してご利用の方々も多いかと存じます。</p><p>その場合には、QnA Maker のリソースで利用している側の Azure App Service についても、上記の Web App Bot の Azure App Service と同様に、[常時接続] を ON に設定変更頂く必要がございます。</p><p>今回の内容としては以上となります。</p><p>また、全体的なレスポンスの一般的なパフォーマンス向上という観点では、App Service Plan のスケールアップも有効かと存じますので、こちらも状況に応じてご検討ください。 </p><p>参考 : Azure でのアプリのスケールアップ<br><a href="https://docs.microsoft.com/ja-jp/azure/app-service/web-sites-scale">https://docs.microsoft.com/ja-jp/azure/app-service/web-sites-scale</a></p><p>それでは、また。</p><br />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;※ これまで Azure Bot Service Support Team Blog にて公開していた記事を移しました。&lt;/p&gt;
&lt;p&gt;こんにちは。Azure Bot Service Support Team です。&lt;/p&gt;
&lt;p&gt;Web App Bot をご利用の際に、ボ</summary>
      
    
    
    
    
    <category term="Azure Bot Service" scheme="https://jpdsi.github.io/blog/tags/Azure-Bot-Service/"/>
    
    <category term="Azure App Service" scheme="https://jpdsi.github.io/blog/tags/Azure-App-Service/"/>
    
    <category term="設定" scheme="https://jpdsi.github.io/blog/tags/%E8%A8%AD%E5%AE%9A/"/>
    
  </entry>
  
</feed>
